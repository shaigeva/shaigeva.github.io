<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Shai Geva</title>
    <link>https://shaigeva.com/</link>
    <description>Recent content on Shai Geva</description>
    <generator>Hugo -- 0.134.3</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 May 2025 11:19:56 +0300</lastBuildDate>
    <atom:link href="https://shaigeva.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>10 Ways To Shoot Yourself In The Foot With Tests</title>
      <link>https://shaigeva.com/posts/10_footguns/ten_footguns/</link>
      <pubDate>Fri, 16 May 2025 11:19:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/ten_footguns/</guid>
      <description>&lt;p&gt;This is a series of posts, following a talk I gave (twice - at Pycon-US 2023 and Pycon-IL 2024), about testing best (and not-so-best) practices.&lt;/p&gt;
&lt;p&gt;The talk shares 10 practices that I had bad experience with, along with ways of avoiding them.&lt;/p&gt;
&lt;p&gt;Starting with simple (but useful!), and moving on to more complex ideas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://shaigeva.com/posts/10_footguns/01_there_are_no_tests/&#34;&gt;There are no tests&lt;/a&gt; (warm up)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shaigeva.com/posts/10_footguns/02_untested_tests/&#34;&gt;Untested tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shaigeva.com/posts/10_footguns/03_the_tests_are_not_isolated/&#34;&gt;The tests are not isolated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shaigeva.com/posts/10_footguns/04_no_locality_of_behavior/&#34;&gt;No locality of behavior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shaigeva.com/posts/10_footguns/05_unclear_language/&#34;&gt;Unclear language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shaigeva.com/posts/10_footguns/06_testing_too_many_things/&#34;&gt;Testing too many things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Improper test scope&lt;/li&gt;
&lt;li&gt;Test doubles everywhere&lt;/li&gt;
&lt;li&gt;Slow tests&lt;/li&gt;
&lt;li&gt;Wrong priorities&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Videos and slide decks from the talks&lt;/p&gt;</description>
    </item>
    <item>
      <title>Footgun #10 - Wrong Priorities</title>
      <link>https://shaigeva.com/posts/10_footguns/10_wrong_priorities/</link>
      <pubDate>Fri, 16 May 2025 10:19:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/10_wrong_priorities/</guid>
      <description>&lt;p&gt;(this post is part of a &lt;a href=&#34;https://shaigeva.com/posts/10_footguns/ten_footguns/&#34;&gt;series&lt;/a&gt; about good testing practices)&lt;/p&gt;
&lt;p&gt;Footgun 10: wrong priorities&lt;/p&gt;
&lt;p&gt;We saw a bunch of different practices,
and how they will affect us by changing the properties of our tests.&lt;/p&gt;
&lt;p&gt;The bug funnel is all about performance.
&amp;ldquo;Testing implementation instead of behavior&amp;rdquo; us about maintainability and strength.&lt;/p&gt;
&lt;p&gt;But how do we prioritize?&lt;/p&gt;
&lt;p&gt;Now, the objective of tests is their strength.
We have tests so that they catch bugs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Footgun #9 - Slow Tests</title>
      <link>https://shaigeva.com/posts/10_footguns/09_slow_tests/</link>
      <pubDate>Fri, 16 May 2025 10:18:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/09_slow_tests/</guid>
      <description>&lt;p&gt;(this post is part of a &lt;a href=&#34;https://shaigeva.com/posts/10_footguns/ten_footguns/&#34;&gt;series&lt;/a&gt; about good testing practices)&lt;/p&gt;
&lt;p&gt;Footgun 9: Slow tests&lt;/p&gt;
&lt;p&gt;Yeah, slow tests are not fun.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll talk about two ways in which they are not fun.&lt;/p&gt;
&lt;p&gt;The first way is what I like to think of as the bottleneck and the time bomb.&lt;/p&gt;
&lt;p&gt;The bottleneck here is where the tests take so long to run, that we have a long queue of tasks waiting to be merged to the main branch.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Footgun #8 - Test Doubles Everywhere</title>
      <link>https://shaigeva.com/posts/10_footguns/08_test_doubles_everywhere/</link>
      <pubDate>Fri, 16 May 2025 10:17:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/08_test_doubles_everywhere/</guid>
      <description>&lt;p&gt;(this post is part of a &lt;a href=&#34;https://shaigeva.com/posts/10_footguns/ten_footguns/&#34;&gt;series&lt;/a&gt; about good testing practices)&lt;/p&gt;
&lt;p&gt;Footgun 8 - test doubles everywhere
Sometimes, in a test, we switch a part of the system, a dependency, with an alternative implementation.&lt;/p&gt;
&lt;p&gt;These are called test doubles. Things like stubs, mocks and fakes.&lt;/p&gt;
&lt;p&gt;The main reason we use them is performance - if the real thing is too slow to run a lot of tests, we switch it with a fast test double.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Footgun #7 - Improper Test Scope</title>
      <link>https://shaigeva.com/posts/10_footguns/07_improper_test_scope/</link>
      <pubDate>Fri, 16 May 2025 10:16:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/07_improper_test_scope/</guid>
      <description>&lt;p&gt;(this post is part of a &lt;a href=&#34;https://shaigeva.com/posts/10_footguns/ten_footguns/&#34;&gt;series&lt;/a&gt; about good testing practices)&lt;/p&gt;
&lt;p&gt;Let’s say our Book Store is a web service, and it uses a DB.&lt;/p&gt;
&lt;p&gt;We’ll think about two alternative test suites - “behavior tests” and “implementation tests”
And try to imagine what our life will look like if we would have chosen one test suite or the other.&lt;/p&gt;
&lt;p&gt;We’ll look at an almost identical test in both test suites.&lt;/p&gt;
&lt;p&gt;The test verifies that if we edit the description of a book, then it has really been updated.
Pretty simple.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Footgun #6 - Testing Too Many Things</title>
      <link>https://shaigeva.com/posts/10_footguns/06_testing_too_many_things/</link>
      <pubDate>Fri, 16 May 2025 10:15:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/06_testing_too_many_things/</guid>
      <description>&lt;style&gt;
.code-example {
  background-color: #2E2E33;
  padding: 10px;
  margin-bottom:10px;
  border-radius: 5px;
  font-family: monospace;
  white-space: pre;
  color: #d5d5d6;
  font-size: .78em;
  line-height: 1.5;
}
.highlight-red {
  color: red;
}
.highlight-green {
  color: green;
}
&lt;/style&gt;

&lt;p&gt;(this mini-post is part of a &lt;a href=&#34;https://shaigeva.com/posts/10_footguns/ten_footguns/&#34;&gt;series&lt;/a&gt; about good testing practices)&lt;/p&gt;
&lt;p&gt;Just like with product code, if we put too many things in the same place we get a mess.&lt;/p&gt;
&lt;p&gt;My rule of thumb is to try hard to test a single fact about the behavior of the code.
And it helps if I use these specific words mentally.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Footgun #5 - Unclear Language</title>
      <link>https://shaigeva.com/posts/10_footguns/05_unclear_language/</link>
      <pubDate>Fri, 18 Oct 2024 20:15:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/05_unclear_language/</guid>
      <description>&lt;style&gt;
.code-example {
  background-color: #2E2E33;
  padding: 10px;
  margin-bottom:10px;
  border-radius: 5px;
  font-family: monospace;
  white-space: pre;
  color: #d5d5d6;
  font-size: .78em;
  line-height: 1.5;
}
.highlight-red {
  color: red;
}
.highlight-green {
  color: green;
}
&lt;/style&gt;

&lt;p&gt;(this mini-post is part of a &lt;a href=&#34;https://shaigeva.com/posts/10_footguns/ten_footguns/&#34;&gt;series&lt;/a&gt; about good testing practices)&lt;/p&gt;
&lt;p&gt;Another problem that makes it more difficult to understand tests is unclear language.&lt;/p&gt;
&lt;p&gt;Two guidelines that help me deal with this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We want to use decisive language&lt;/li&gt;
&lt;li&gt;We want the language to be specific and explicit&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Suppose we have a book store and we&amp;rsquo;re testing the functionality for editing a book.&lt;br&gt;
Let&amp;rsquo;s see some examples of test phrasing:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Footgun #4 - No Locality of Behavior</title>
      <link>https://shaigeva.com/posts/10_footguns/04_no_locality_of_behavior/</link>
      <pubDate>Wed, 16 Oct 2024 20:15:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/04_no_locality_of_behavior/</guid>
      <description>&lt;p&gt;(this mini-post is part of a &lt;a href=&#34;https://shaigeva.com/posts/10_footguns/ten_footguns/&#34;&gt;series&lt;/a&gt; about good testing practices)&lt;/p&gt;
&lt;p&gt;One testing problem that doesn&amp;rsquo;t get enough attention in my opinion is tests that don&amp;rsquo;t have locality of behavior.&lt;/p&gt;
&lt;p&gt;By that I mean cases where a test is broken down into different parts in a way that makes understanding more difficult.&lt;/p&gt;
&lt;p&gt;This is important in every type of code, and tests are no exception.&lt;/p&gt;
&lt;h2 id=&#34;example-non-local-data&#34;&gt;Example: non-local data&lt;/h2&gt;
&lt;p&gt;Consider this test:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Footgun #3 - The Tests Are Not Isolated</title>
      <link>https://shaigeva.com/posts/10_footguns/03_the_tests_are_not_isolated/</link>
      <pubDate>Tue, 08 Oct 2024 20:15:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/03_the_tests_are_not_isolated/</guid>
      <description>&lt;p&gt;(this post is part of a &lt;a href=&#34;https://shaigeva.com/posts/10_footguns/ten_footguns/&#34;&gt;series&lt;/a&gt; about good testing practices)&lt;/p&gt;
&lt;p&gt;Writing tests that are not isolated is a sure way to create unnecessary work for ourselves.&lt;/p&gt;
&lt;p&gt;By &amp;ldquo;tests that are not isolated&amp;rdquo;, I mean tests that sometimes have a different outcome (failing / passing) if we run
only a subset of them, if we run them in a different order or if we run them in parallel.&lt;/p&gt;
&lt;h2 id=&#34;why-is-this-a-problem&#34;&gt;Why is this a problem?&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s say we have 30 tests, and test 24 passes if we run it individually but fails if we run the entire test suite.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Footgun #2 - Untested Tests</title>
      <link>https://shaigeva.com/posts/10_footguns/02_untested_tests/</link>
      <pubDate>Sat, 05 Oct 2024 17:15:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/02_untested_tests/</guid>
      <description>&lt;p&gt;(this post is part of a &lt;a href=&#34;https://shaigeva.com/posts/10_footguns/ten_footguns/&#34;&gt;series&lt;/a&gt; about good testing practices)&lt;/p&gt;
&lt;p&gt;Sometimes our tests lie to us.&lt;/p&gt;
&lt;p&gt;We have a test that was supposed to protect us from some bug, but that bug happened after all.&lt;/p&gt;
&lt;p&gt;Of course, what happened was that we made a mistake, and the test didn&amp;rsquo;t really verify what we thought it does.&lt;/p&gt;
&lt;p&gt;As it turns out - when we write a test, it&amp;rsquo;s a good idea to spend a little effort to verify the test actually works.&lt;br&gt;
To make sure that if the bug happens, the test does indeed fail.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>https://shaigeva.com/about/</link>
      <pubDate>Sat, 05 Oct 2024 17:00:56 +0300</pubDate>
      <guid>https://shaigeva.com/about/</guid>
      <description>&lt;div style=&#34;position: relative; display: inline-block;&#34;&gt;
  &lt;img src=&#34;https://shaigeva.com/shai_mic_cover.jpg&#34; alt=&#34;Profile pic&#34; title=&#34;Profile pic&#34; style=&#34;margin:0; display: block; width: 100%;&#34; /&gt;
  &lt;div style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: linear-gradient(to bottom, rgba(0, 0, 0, 0.1) 70%, rgba(0, 0, 0, 0.7) 100%); pointer-events: none;&#34;&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;My name is Shai Geva.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been creating software for humans, with humans, for over 20 years.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m mostly a builder, but have also played more &amp;ldquo;high level roles&amp;rdquo;, like product and management (my current position is
tech-lead at &lt;a href=&#34;https://www.sayata.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Sayata&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Footgun #1 - There Are No Tests</title>
      <link>https://shaigeva.com/posts/10_footguns/01_there_are_no_tests/</link>
      <pubDate>Fri, 04 Oct 2024 13:01:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/01_there_are_no_tests/</guid>
      <description>&lt;p&gt;(this post is part of a &lt;a href=&#34;https://shaigeva.com/posts/10_footguns/ten_footguns/&#34;&gt;series&lt;/a&gt; about good testing practices)&lt;/p&gt;
&lt;p&gt;This is a &amp;ldquo;warm-up footgun&amp;rdquo; to the blog post series.&lt;/p&gt;
&lt;p&gt;The easiest way to shoot yourself in the foot, testing-wise, is to have no tests at all.&lt;/p&gt;
&lt;p&gt;In my experience, writing any tests often helps us - even if these tests are not well-written, and even if they&amp;rsquo;re just a drop in the sea.&lt;/p&gt;
&lt;p&gt;There are a few reasons I noticed, why moving from no tests at all to even one test for some area of the code is useful.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Talks</title>
      <link>https://shaigeva.com/talks/</link>
      <pubDate>Sun, 29 Sep 2024 07:38:56 +0300</pubDate>
      <guid>https://shaigeva.com/talks/</guid>
      <description>&lt;h1 id=&#34;10-ways-to-shoot-yourself-in-the-foot-with-tests---pycon-il-2024-hebrew&#34;&gt;10 Ways To Shoot Yourself In The Foot With Tests - PyCon-IL 2024 (Hebrew)&lt;/h1&gt;
&lt;p&gt;(English version below)&lt;/p&gt;
&lt;p&gt;The talk shares hard-learned advice about how to avoid getting yourself in trouble with tests.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a href=&#34;https://bit.ly/testing_footguns_pycon_il_2024&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Slideshare PyCon IL 2024&lt;/a&gt;&lt;/p&gt;


    
    &lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/k-vDmoPT84g?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;
      &gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;hr&gt;
&lt;h1 id=&#34;10-ways-to-shoot-yourself-in-the-foot-with-tests---pycon-us-2023-english&#34;&gt;10 Ways To Shoot Yourself In The Foot With Tests - PyCon-US 2023 (English)&lt;/h1&gt;
&lt;p&gt;Given at Salt Lake City, Utah.
The talk shares hard-learned advice about how to avoid getting yourself in trouble with tests.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
