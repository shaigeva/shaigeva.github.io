[{"content":"(first post in a series)\nLike many others, I spent a lot of time thinking about AI and software development.\nI belong to the camp that believes that AI is a total paradigm shift - it\u0026rsquo;ll redefine the ecosystem and what it means to create software, and it\u0026rsquo;ll be the deepest change we have seen to date.\nMy own \u0026ldquo;flavor\u0026rdquo; of thinking about this is to try, from an engineering / implementation perspective, to understand what that change could look like.\nThis blog series will dig into this and share my thoughts and conclusions from experimentation.\nI\u0026rsquo;ll talk about both:\nWhat can we already do today? Concrete, pragmatic practices we can use right now to make ourselves faster. And more theoretically: What would need to be different in how we work so in the future (few years?), everything will indeed be different and much more productive? My hope is that these posts will help enthusiastic devs boost their productivity and contribute to the general conversation around AI and coding.\nIn this intro post, I\u0026rsquo;m describing the general concept, with some high-level examples (most of the series will be low-level and technical).\nCreating maintainable software By now (2025-06), the term vibe coding has been with us for a few months, and tools / platforms have been around for quite a bit longer.\nAI coding assistants already help us in many ways, including creating impressive projects to a level that would have seemed like science fiction just a few years ago.\nWe\u0026rsquo;re seeing fast and significant improvement in many areas of dev work.\nHowever, the effect is far less impressive for what is the bulk of dev work today - ongoing work on production-grade large codebases.\nDon\u0026rsquo;t get me wrong - it\u0026rsquo;s great, it\u0026rsquo;s an amazing productivity boost, but it\u0026rsquo;s not the same categorical change that we\u0026rsquo;re seeing when vibe coding smaller non-production-grade projects.\nWe all know that in most real-world non-small codebases, on most changes we make, AI just doesn\u0026rsquo;t speed us up 10x right now.\nIn practice, while this does happen sometimes - at the moment it\u0026rsquo;s only \u0026ldquo;here and there\u0026rdquo;. It\u0026rsquo;s not the general case.\nThe easy path is to adjust the code to the AI (AI-first / AI-native / AI-driven) I believe that huge improvements to productivity on large codebases are possible with the current generation of LLMs.\nMore than 10x.\nAnd I believe that part of what we need to do in order to get there in the long run is to build AI compatibility into the codebase from the ground up (this approach is usually called AI-first / AI-native / AI-driven development).\nFor the shorter-term, this can be \u0026ldquo;done in pieces\u0026rdquo; - make a certain part, or certain aspect of the codebase be \u0026ldquo;AI-friendly\u0026rdquo;.\nWhy? Well, AI has different trade-offs than human teams in what is easy or hard when creating software.\nSo if we want AI to 10x what it can do (and what we can do), the easiest way is to build the code in a way that fits the AI\u0026rsquo;s tradeoffs.\nIn other words, we need to have definitions that dictate aspects of the code and workflow, which are AI-friendly.\nThese can be very general and very simple (like \u0026ldquo;use meaningful variable names\u0026rdquo;), or very use-case specific, like how to use a specific framework in a specific language.\nSo anything might be relevant - workflow, specifications, tech stack, packages, tooling, coding conventions, code design, testing techniques, etc.\nThe central point here is that we will not \u0026ldquo;continue to write code like we do now plus add AI\u0026rdquo;, but that we\u0026rsquo;ll see substantial changes to all of these.\nDesign patterns I\u0026rsquo;ll refer to these aspects of the code and workflow as \u0026ldquo;design patterns\u0026rdquo;.\nI\u0026rsquo;m using this term because there\u0026rsquo;s no real established terminology. Some of the things I\u0026rsquo;ll talk about are more \u0026ldquo;practices\u0026rdquo;, some are more \u0026ldquo;coding conventions\u0026rdquo; and some can only be called \u0026ldquo;design patterns\u0026rdquo;. So I\u0026rsquo;m going with the term that I think is best at conveying that:\nThe way we do code is different, it\u0026rsquo;s not just how we prompt or the tools we use. It\u0026rsquo;s a design approach. It\u0026rsquo;s part of the design of our code, our architecture, our workflow. A key part of being productive with AI, I believe, is to master these.\nHow should we structure the code so AI can work with it well? What abstraction layers? What will the APIs between different components look like? Which tests should we have, at which layers?\nI\u0026rsquo;ll talk about examples (and do some POCs) of such design patterns.\nIt\u0026rsquo;s worth mentioning that most (or all) concepts are not going to be too exotic - the approaches we\u0026rsquo;ll explore are variations of established industry techniques.\nAn experienced developer will be familiar with many of them.\nThe point here is less to invent new ideas, and more to examine the option of applying what already exists in a systematic way to the general problem of programming with AI.\nFrameworks Individual design patterns are nice, and will be very beneficial for those that learn them.\nI believe, however, that the best way forward is what I think of as AI-first frameworks.\nVery loosely, what I mean by a framework is a \u0026ldquo;combo\u0026rdquo; of these design patterns plus relevant tooling.\nIt can be something like\nA Python backend service Enforces type annotations (Python generally allows, but doesn\u0026rsquo;t require, static types. So a framework could require it). Using a specific backend library (e.g. Python\u0026rsquo;s FastAPI) Has pre-defined layers of abstraction. E.g. one such layer can be \u0026ldquo;there is a DAL (data access layer), and all its APIs only receive and return immutable data structures\u0026rdquo;. There are pre-defined layers where tests are written, and they have specific technical requirements. E.g. \u0026ldquo;the DAL must have a robust test suite for testing every single workflow. That test suite only uses the DAL API (can\u0026rsquo;t use SQL or an ORM directly)\u0026rdquo;. etc. (there will probably be dozens of these, incl. specific commands for how we run some tools, AI agent rule files and whatever\u0026rsquo;s needed to enforce the specification) These frameworks will create a \u0026ldquo;cohesive whole\u0026rdquo;, where the different techniques complement one another so that all important concerns are handled by an AI agent that uses the framework.\nFor example, definitions in the spirit of what I gave above (but, of course, much more explicit and robust) would force the AI agent to create a well-defined set of all possible interactions with the database and have tests that thoroughly cover them. Other similar layers will cover different concerns so together most code will be easily testable.\nBut why do we need these \u0026ldquo;frameworks\u0026rdquo;?\nI think that having each team hand-craft their own AI-compatible practices for their codebase is kind of like having each backend team develop their own web framework from low-level HTTP libraries, just because \u0026ldquo;we want it to be tailored to our use case\u0026rdquo;.\nIt can be done, but we all understand it\u0026rsquo;s not a good idea. It\u0026rsquo;s very expensive and the result will suck most of the time.\nI think it\u0026rsquo;ll be much better if the industry will \u0026ldquo;think of it\u0026rdquo; a little bit like we think of web development today: there will be common (open source?) frameworks / toolsets created by experts, and most teams will use a combination of a few standard options, plus customization where actually needed.\nTL;DR There are a lot of pieces to this, and it\u0026rsquo;ll take a while until I manage to release blog posts covering everything I have in mind, so it\u0026rsquo;s worth it to give a very high level view of the approach here:\nPrinciples The most significant mental models here are the feedback loop and the bug funnel.\nThe bug funnel (it\u0026rsquo;s not really just bugs - also features etc., but \u0026ldquo;bug funnel\u0026rdquo; is easy to think about) is the concept that when code is written (by a human or AI), it sometimes contains things that are not desirable.\nAs that code \u0026ldquo;moves forward in the software lifecycle\u0026rdquo; (compilers, linters, various tests, review, etc.), some of these bugs are discovered at every step and get filtered out.\nBugs that are discovered earlier in the \u0026ldquo;funnel\u0026rdquo; are cheaper than bugs found later.\nIn other words, it\u0026rsquo;s a very good idea to \u0026ldquo;shift-left\u0026rdquo; bugs in the bug funnel.\nThe feedback loop is what we all know - planning, doing, verifying and then doing it again and again until we\u0026rsquo;re done.\nA fast and effective feedback loop has always been one of the most significant things in the process of creating software, and AI assistants will magnify that by orders of magnitude.\nOur main objective is to make the human feedback loop \u0026ldquo;better\u0026rdquo; (faster, easier, more effective).\nAnd the main way that we\u0026rsquo;ll help the human feedback loop is by giving the AI agents their own internal feedback loop. We\u0026rsquo;ll work very hard to enable the agent to plan, make changes and then verify them itself and auto-heal them. So that it\u0026rsquo;ll give the result to a human only after it\u0026rsquo;s done and \u0026ldquo;filtered out\u0026rdquo; all the bugs it can.\nIn other words, the \u0026ldquo;star of the show\u0026rdquo; is going to be the ability to create fast feedback loops that are effective at both creating new things and shifting-left bugs in the bug funnel.\nMy main focus will be on the verification part - allowing the AI to check the changes it makes.\nWe\u0026rsquo;ll explore a bunch of directions like linting, static typing approaches, ideas like automatic screenshots and LLM automatic reviews. And mostly - A LOT of code design and testing techniques.\nPractices / techniques As mentioned, our main technical objective will be a fast AI-internal feedback loop that \u0026ldquo;rules out\u0026rdquo; as many \u0026ldquo;bugs\u0026rdquo; as possible, as quickly as possible.\n\u0026ldquo;Quick\u0026rdquo; means that almost all \u0026ldquo;bugs\u0026rdquo; can be ruled-out in a few seconds by the AI without human intervention.\nThere will, of course, also be slower verifications like e2e tests - but most bugs should be caught by the faster tests, earlier in the process.\nThis has very strong implications on what practices are expected to be effective.\nFor instance:\nWe need a setup that allows the AI agent to run code to check the changes it makes (sometimes the entire program, sometimes only tests). Having an LLM just \u0026ldquo;review\u0026rdquo; written code just ain\u0026rsquo;t gonna cut it. But - we should try hard to verify things about the code even without running it (as a test or otherwise). Examples: Static typing, of course. This can be taken further than most people are aware and AI is a good match for this. Preference for pure functions where applicable. Have simulators for most side-effects, especially those that we don\u0026rsquo;t directly control. A simulator is a simplified implementation of some part of a real thing, that has a very similar behavior. For example, a DB table can be a list of in-memory tuples plus some wrappers. AKA \u0026ldquo;fakes\u0026rdquo; in standard test-speak. Required because side-effects might be unsafe, unreliable, uncontrollable and slow, but we must allow the AI to run code (either as a test or not) in a way that is safe-enough, reliable-enough, controllable-enough and fast-enough. This is an almost logical necessity, even though it\u0026rsquo;s not \u0026ldquo;part of the conversation\u0026rdquo; now at all (I\u0026rsquo;m not sure I\u0026rsquo;ve ever seen it mentioned in the AI-building conversation, actually). Without this, everything\u0026rsquo;s going to be much harder. I will be talking a lot about this, since bringing this down to reality is a challenge. Very strong preference towards small building blocks that compose into larger components where possible (stronger than would be appropriate for many human teams). This helps to have \u0026ldquo;divide and conquer\u0026rdquo; of bugs, leaving as few bugs as possible to the more complex, slower tests. Lastly, of course - we need to actually use all of this to design and create coding+testing strategies that have a good ROI. This point is the most vague, the most nuanced, but also probably the most important because it\u0026rsquo;s necessary, and I think it\u0026rsquo;s pretty difficult. In the next post , I\u0026rsquo;ll give an example of what an internal AI feedback loop looks like on a small project, and start looking at some of the more basic techniques.\nI\u0026rsquo;ve had these ideas running around in my head for a while and at least for me they are interesting, so I felt like it\u0026rsquo;s time to share.\nI hope you find this useful, or at least interesting.\nPing me on social (twitter / x, linkedin) and let me know!\nnext post: what an AI feedback loop looks like \u0026gt;\u0026gt; ","permalink":"https://shaigeva.com/posts/ai_frameworks/01_ai_frameworks_intro/","summary":"\u003cp\u003e(first post in a series)\u003c/p\u003e\n\u003cp\u003eLike many others, I spent a lot of time thinking about AI and software development.\u003c/p\u003e\n\u003cp\u003eI belong to the camp that believes that AI is a total paradigm shift - it\u0026rsquo;ll redefine the ecosystem and what it means to\ncreate software, and it\u0026rsquo;ll be the deepest change we have seen to date.\u003c/p\u003e\n\u003cp\u003eMy own \u0026ldquo;flavor\u0026rdquo; of thinking about this is to try, from an \u003cstrong\u003eengineering / implementation\u003c/strong\u003e perspective, to understand\nwhat that change could look like.\u003cbr\u003e\nThis blog series will dig into this and share my thoughts and conclusions from experimentation.\u003cbr\u003e\nI\u0026rsquo;ll talk about both:\u003c/p\u003e","title":"Moving past vibe-coding? AI-First Design Patterns and Frameworks (blog post series)"},{"content":"(this post is part of a series about creating production-grade maintainable AI-first projects, using AI-first design patterns and frameworks)\nIn the previous post I mentioned that an internal AI feedback loop will be central to all our AI-first design patterns.\nBut \u0026ldquo;AI feedback loop\u0026rdquo; might mean different things to different people - so this lightweight post focuses on giving an example to make it concrete.\nWe will implement a small (but realistic) project.\nThe project is set up so the agent has an internal feedback loop - it has instructions that tell it to use a loop, and it has a clear way to create effective tests and run validations (the tests it creates, type-checking, linter).\nWe\u0026rsquo;ll see how it makes mistakes, finds them and self-heals.\nWe\u0026rsquo;ll finish by discussing some conclusions that can be drawn from this example, small as it is.\nA couple of notes:\nThe point is to show what a feedback loop looks like - this is why the project is intentionally small. The same principles apply at larger scale (and I\u0026rsquo;ve been using them in parts of my work on production code) - we\u0026rsquo;ll see this in later posts. The beginning of the post has fewer details to make it more readable. For those who want to dig in more - there\u0026rsquo;s a \u0026ldquo;more details\u0026rdquo; section at the end discussing caveats and considerations. What are we building? I wanted something small but realistic, with enough complexity that the AI agent would make mistakes here and there (otherwise there would be nothing to self-heal).\nI went with a utility similar to something we had at a previous job - a Python two-tier cache consisting of an in-memory object dictionary backed by a local SQLite db.\n┌─────────────────────────────────────────┐ │ APPLICATION │ └───────────────────┬─────────────────────┘ │ ▼ ┌───────────────────────────┐ │ IN-MEMORY CACHE │ │ ─────────────────── │ │ Fast, small, volatile │ │ │ │ • Python dict │ │ • Live Pydantic objects │ └───────────┬───────────────┘ │ │ ▼ ┌───────────────────────────┐ │ DISK CACHE │ │ ────────────── │ │ Slow, large, persistent │ │ │ │ • SQLite database │ │ • Serialized JSON │ └───────────────────────────┘ Some of its features:\nIn-memory cache points to objects, disk cache contains the objects serialized to strings. The cache supports Pydantic objects (a popular data modeling library in Python) - each instance handles a specific Pydantic class (data format). Schema versioning with validation. Multiple cache eviction policies - LRU supporting size, object count, TTL (time to live). etc. etc. In practice this is complex enough that Claude code (the AI agent used) makes mistakes sometimes.\nWhat\u0026rsquo;s our starting point? Claude and I created a small repo containing project scaffolding, a plan, and AI agent instructions (including the setup to run formatting, linting, type-checking and testing).\nThe repo: The \u0026ldquo;before\u0026rdquo; state.\nThe code starts as a basic stub of the cache:\nclass DiskBackedCache: def get(self, key: str, timestamp: Optional[float] = None) -\u0026gt; Optional[CacheableModel]: raise NotImplementedError() def put(self, key: str, value: CacheableModel, timestamp: Optional[float] = None) -\u0026gt; None: raise NotImplementedError() def delete(self, key: str) -\u0026gt; None: raise NotImplementedError() ... There is a single test example that serves as a guide for the test structure. This example tests the cache \u0026ldquo;externally\u0026rdquo; (black-box style) - the testing instructions tell the agent to prefer that style.\ndef test_disk_backed_cache_init() -\u0026gt; None: try: cache = DiskBackedCache( db_path=\u0026#34;:memory:\u0026#34;, model=CacheableModel, max_memory_items=10, max_memory_size_bytes=1024 * 1024, max_disk_items=100, max_disk_size_bytes=10 * 1024 * 1024, memory_ttl_seconds=60.0, disk_ttl_seconds=3600.0, max_item_size_bytes=10 * 1024, ) assert cache is not None cache.close() except NotImplementedError: pass Our plan, auto-derived from the spec using AI, contains ~40 steps:\n# Progress Tracking - [ ] Step 1: In-Memory Cache - Basic Put/Get - [ ] Step 2: Key Validation - [ ] Step 3: Model Type Validation ... Our AI instructions cover a variety of aspects - most are not project-specific and are reusable. For example, this is how we set up the feedback loop (in this case the instructions are literally \u0026ldquo;plan → do → verify\u0026rdquo;):\n## **How to implement each step** **Work through these 3 sub-steps sequentially:** 1. **Plan** - Read `spec.md` for this step\u0026#39;s requirements. Describe the behavior to implement in detail. Design tests for the new behavior. Identify if any existing tests need updates to cover modified functionality. 2. **Implement** - Write the code and all tests together. Include updates to existing tests if identified in planning. 3. **Validate and commit** - Run `./devtools/run_all_agent_validations.sh` and fix any failures. Repeat until all validations pass (zero errors, zero warnings). Once passing, commit the work and update `IMPLEMENTATION_PLAN.md`. Running the agent This amounts to firing up a new Claude code session and telling it to implement the plan - which it did.\nIn the session, we can see the feedback loop working.\nEvery change includes both code and tests, then the agent runs the validation script and tries to correct failures. It won\u0026rsquo;t continue until everything passes (if it fails, it alerts the user).\nHere\u0026rsquo;s what a single iteration (the auto-fix part) looks like: After writing TTL cache eviction logic and tests, one test failed:\n\u0026gt; assert retrieved == TTLModel(value=1) E AssertionError: assert None == TTLModel(schema_version=\u0026#39;1.0.0\u0026#39;, value=1) The agent sees this and starts reasoning to understand what happened. After some thinking, the agent diagnosed the issue as a fairly subtle bug:\nThe key issue emerges in the memory cache retrieval logic: when an item is returned from memory, only the memory timestamp gets updated. This means the disk timestamp remains static, which breaks the expected caching behavior. This gets fixed:\n⏺ Update(/Users/shai/proj/shaig/learn/ai_framework_posts/disk_backed_cache_example/disk_backed_cache_example/disk_backed_cache.py) ... 284 self._memory_timestamps[key] = timestamp 285 + # Also update disk timestamp to keep them in sync 286 + self._conn.execute( 287 + \u0026#34;UPDATE cache SET timestamp = ? WHERE key = ?\u0026#34;, 288 + (timestamp, key), 289 + ) 290 + self._conn.commit() The tests then pass:\n⏺ Bash(./devtools/run_all_agent_validations.sh) ⎿ ✅ All validations passed (lint, format, type check, tests) The agent then moves on to the next step in the plan.\nThere are several such examples in the session, and they look just like what I see whenever I have an effective feedback loop - tests are created that have fairly tight coverage, and they keep the agent from drifting away from the path.\n(if you want to see the kinds of issues that came up, search the session for \u0026ldquo;failed:\u0026rdquo;, which is what the validation script prints when there are errors)\nHere\u0026rsquo;s an export of the session (I did several of these to verify consistency): Claude code session export.\nEnd result Here\u0026rsquo;s the finished project:\nThe \u0026ldquo;after\u0026rdquo; state.\nThe result is a working implementation of the spec with a fairly comprehensive test suite (you\u0026rsquo;re welcome to try it out).\nIn terms of quality - it\u0026rsquo;s not bad, but not perfect.\nThere are some issues with design, code quality, and test quality - these will be part of what we address in later posts.\nSome observations First - I hope this gives some intuition about what an internal AI feedback loop might look like.\nWe used some basic ideas here:\nIt\u0026rsquo;s not just telling the agent to create the project: We have instructions telling the agent how to do things. We have a spec. We have a plan (which is less important). Scaffolding: There\u0026rsquo;s a starting point showing the structure of the code and the tests. Validations: We have a setup for easily running linting, formatting, type-checking (not obvious for Python, though not rare), and tests after every change. The agent has access to the validation results, including which errors or warnings occurred. Step size the agent can handle: The plan breaks the work into steps that are mostly very easy for the agent. Tests for each step are part of the loop: The agent is instructed to create tests for every new feature or change. These are very important - and are also pretty common in AI-dev discussion today (2025-10). We see most of them in twitter posts, youtube videos, etc.\nOne thing that\u0026rsquo;s maybe less obvious is the effectiveness of the tests.\nThe tests are black-box style, testing the public interface of the entire cache utility.\nFor this project, this is a very solid choice - the tests verify the actual behavior of the code, but are still easy to run and very fast.\nWhile in many larger projects you can\u0026rsquo;t \u0026ldquo;test the whole thing\u0026rdquo; like this, sometimes it\u0026rsquo;s possible to \u0026ldquo;isolate some aspect of the work\u0026rdquo; and test that aspect this way.\nIt\u0026rsquo;s a simple idea, but if you keep it in mind, you can use it effectively in your real-life projects with minimal overhead.\nA simple example would be turning a bunch of API input/output JSON examples into data class definitions (e.g. Python\u0026rsquo;s Pydantic, Typescript\u0026rsquo;s Zod) that handle these JSONs. Let\u0026rsquo;s say you have a few dozen JSON examples from an API (including all errors and edge cases). Maybe one of them looks like this:\n{ \u0026#34;some_field\u0026#34;: 123, \u0026#34;another_field\u0026#34;: \u0026#34;hello\u0026#34;, \u0026#34;optional_field\u0026#34;: [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;], \u0026#34;sub_model\u0026#34;: { \u0026#34;sub_field_1\u0026#34;: \u0026#34;value1\u0026#34;, \u0026#34;sub_field_2\u0026#34;: 456 } } You want to end up with this:\nclass SubModel(BaseModel): sub_field_1: str sub_field_2: int class MyModel(BaseModel): some_field: int another_field: str optional_field: Optional[List[str]] = None sub_model: Optional[SubModel] = None You create a stub for a single test:\ndef test_serialization_example_1() -\u0026gt; None: example_json = # ... read the example file model_from_json = MyModel.model_validate_json(example_json) # this is how you deserialize in Pydantic manual_model == MyModel( some_field=123, another_field=\u0026#34;hello\u0026#34;, optional_field=[\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;], sub_model=SubModel( sub_field_1=\u0026#34;value1\u0026#34;, sub_field_2=456 ) ) assert model_from_json == manual_model Then you tell the agent to create the data classes and tests for all other examples, using this test as a guide.\nAt a previous job, we had many API integrations with semi-documented APIs, and I created thousands of lines of code like this. Very stable, almost zero work.\nNow, it\u0026rsquo;s true that historically, a comprehensive test suite for serializing data structures would often be considered a waste of time - but now that we\u0026rsquo;re working with AI agents, the tradeoffs are different, and this approach is what allowed us to save quite a bit of work for every API integration.\nMore details Some more details that might be interesting but aren\u0026rsquo;t critical to the main point.\nOne-shotting the project When running the example, the project is almost a one-shot - I told the agent to implement the plan, and the only other interactions needed were to tell it \u0026ldquo;continue\u0026rdquo; when it stopped before finishing the entire plan.\nThis is both not important and not realistic - in any real project, we would have a lot of back-and-forth with the agent, certainly at the initial stages of figuring out the fundamentals of the project like fleshing out the core requirements, and finding good design principles if needed.\nWe can also expect a lot of refactoring and creating utilities as the project grows, just like any human-driven project. This project is really not like that:\nThe agent didn\u0026rsquo;t do an obvious refactor which simplifies creating a cache in the tests (the constructor with all parameters is always called) I have created a small test harness for the DB before starting the plan. But, of course, in a real project we wouldn\u0026rsquo;t have this prior to starting - it would emerge as the project gets created. Tests to code ratio A rough count of LOC (lines of code) gives\nCode: 753 Tests: 5874 Which is a bit less than 8:1 ratio. While I wouldn\u0026rsquo;t say any specific number is \u0026ldquo;correct\u0026rdquo;, I think this does point at a reasonable expectation that the heavy part of AI-native codebases will not be the code, but the specifications and tests.\nThe \u0026ldquo;workflow implementation\u0026rdquo; screams for better tooling Many of the agent\u0026rsquo;s instructions in our example are dedicated to workflow management - here\u0026rsquo;s a task list, take a task, do a step, if it fails stop, if it succeeds move to the next step, etc.\nTextual instructions in markdown, that an LLM needs to follow.\nThis is the standard way to manage coding agents ATM (things like MCPs or hooks can improve this - but they don\u0026rsquo;t solve the problem).\nWe\u0026rsquo;re taking something that\u0026rsquo;s supposed to be a deterministic workflow process and trying to force a probabilistic LLM model to do it.\nBut if we take a step back and think about it, it\u0026rsquo;s clearly not the best approach.\nForget for a second that it\u0026rsquo;s a coding workflow and think about any other agentic workflow - would you always use an LLM as the \u0026ldquo;logical router\u0026rdquo; for every part of the workflow?\nOf course not - we have workflow management tools of various abstraction levels.\nThe coding agents themselves are, of course, also implemented using standard logical code (I hope most of them are, at least) - but it\u0026rsquo;s \u0026ldquo;claude code, the platform\u0026rdquo; that\u0026rsquo;s implemented this way, not \u0026ldquo;the workflow that I\u0026rsquo;m using claude code to execute\u0026rdquo;.\nEven with our little example we can see it\u0026rsquo;s problematic. Consider this part of the \u0026ldquo;feedback loop\u0026rdquo;:\n3. **Validate and commit** - Run `./devtools/run_all_agent_validations.sh` and fix any failures. Repeat until all validations pass (zero errors, zero warnings). Once passing, commit the work and update `IMPLEMENTATION_PLAN.md`. That\u0026rsquo;s a \u0026ldquo;sub-step\u0026rdquo;, containing an internal loop with multiple action items and conditions plus actions after the loop finishes.\nIt wasn\u0026rsquo;t like that initially - I started with many more smaller sub-steps, but faced issues like hitting limits (leading to \u0026ldquo;session compacting\u0026rdquo;), sub-step-skipping and others. Even something like using Claude\u0026rsquo;s TODO feature proved very expensive when you have 40 steps and each has 7-8 sub-steps. That\u0026rsquo;s why I ended up \u0026ldquo;squashing\u0026rdquo; multiple action items into each sub-step.\nMore generally, we can say that some of the issues that this brings are:\nExpressing a logical process in English reliably is more difficult than it is with code, of course. It takes away \u0026ldquo;focus\u0026rdquo; from the instructions that the agent needs when performing actual work like writing code or planning tests. But despite that - it\u0026rsquo;s still unreliable. In reality, it still makes mistakes even though this is both pretty simple and critical to the process. The LLM misbehaves FAR too much (e.g. \u0026ldquo;forgetting to plan tests\u0026rdquo; sometimes even though explicitly instructed). It takes more time It costs more tokens / money. An effective coding agent would need a reasonable way to set up deterministic workflows. It doesn\u0026rsquo;t have to be as flexible as a general-purpose workflow engine, but it needs to be strong enough to create a workflow like we had here.\nSumming up This was a simple project that demonstrated a specific concept (the feedback loop).\nThe techniques we saw here work well for simple cases.\nBut we want to make things that are complex and still have a solid workflow with \u0026ldquo;10x productivity\u0026rdquo;.\nFor that, we\u0026rsquo;ll need to maintain these principles (and others) as things get more interesting than a utility that\u0026rsquo;s a single file with a simple API.\nIn the following posts, we\u0026rsquo;ll look at some scenarios like that and explore ideas that can help us.\n\u0026lt;\u0026lt; previous post: AI-First Development Frameworks (intro) | next post: (coming soon) \u0026gt;\u0026gt; ","permalink":"https://shaigeva.com/posts/ai_frameworks/02_ai_feedback_loop_example/","summary":"\u003cp\u003e\u003cem\u003e(this post is part of a \u003ca href=\"https://shaigeva.com/posts/ai_frameworks/01_ai_frameworks_intro/\"\u003eseries\u003c/a\u003e about creating\nproduction-grade maintainable AI-first projects, using AI-first design patterns and frameworks)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eIn the previous post I mentioned that an internal AI feedback loop will be central to all our AI-first design patterns.\u003c/p\u003e\n\u003cp\u003eBut \u0026ldquo;AI feedback loop\u0026rdquo; might mean different things to different people - so this lightweight post focuses on\ngiving an example to make it concrete.\u003c/p\u003e\n\u003cp\u003eWe will implement a small (but realistic) project.\u003cbr\u003e\nThe project is set up so the agent has an internal feedback loop - it has instructions that tell\nit to use a loop, and it has a clear way to create effective tests and run validations (the tests it creates,\ntype-checking, linter).\u003cbr\u003e\nWe\u0026rsquo;ll see how it makes mistakes, finds them and self-heals.\u003c/p\u003e","title":"What an AI Feedback Loop Looks Like"},{"content":"This is a series of posts, following a talk I gave (twice - at Pycon-US 2023 and Pycon-IL 2024), about testing best (and not-so-best) practices.\nThe talk shares 10 practices that I had bad experience with, along with ways of avoiding them.\nStarting with simple (but useful!), and moving on to more complex ideas:\nThere are no tests (warm up) Untested tests The tests are not isolated No locality of behavior Unclear language Testing too many things Improper test scope Test doubles everywhere Slow tests Wrong priorities Videos and slide decks from the talks\n10 Ways To Shoot Yourself In The Foot With Tests - PyCon-US 2023 (English) Given at Salt Lake City, Utah.\nSlides: Slideshare PyCon US 2023\n10 Ways To Shoot Yourself In The Foot With Tests - PyCon-IL 2024 (Hebrew) Slides: Slideshare PyCon IL 2024\n","permalink":"https://shaigeva.com/posts/10_footguns/ten_footguns/","summary":"\u003cp\u003eThis is a series of posts, following a talk I gave (twice - at Pycon-US 2023 and Pycon-IL 2024), about testing best (and not-so-best) practices.\u003c/p\u003e\n\u003cp\u003eThe talk shares 10 practices that I had bad experience with, along with ways of avoiding them.\u003c/p\u003e\n\u003cp\u003eStarting with simple (but useful!), and moving on to more complex ideas:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"/posts/10_footguns/01_there_are_no_tests/\"\u003eThere are no tests\u003c/a\u003e (warm up)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/posts/10_footguns/02_untested_tests/\"\u003eUntested tests\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/posts/10_footguns/03_the_tests_are_not_isolated/\"\u003eThe tests are not isolated\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/posts/10_footguns/04_no_locality_of_behavior/\"\u003eNo locality of behavior\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/posts/10_footguns/05_unclear_language/\"\u003eUnclear language\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/posts/10_footguns/06_testing_too_many_things/\"\u003eTesting too many things\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImproper test scope\u003c/li\u003e\n\u003cli\u003eTest doubles everywhere\u003c/li\u003e\n\u003cli\u003eSlow tests\u003c/li\u003e\n\u003cli\u003eWrong priorities\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eVideos and slide decks from the talks\u003c/p\u003e","title":"10 Ways To Shoot Yourself In The Foot With Tests"},{"content":" (this mini-post is part of a series about good testing practices)\nJust like with product code, if we put too many things in the same place we get a mess.\nMy rule of thumb is to try hard to test a single fact about the behavior of the code. And it helps if I use these specific words mentally.\nSINGLE. FACT. About the BEHAVIOR.\nExample Let\u0026rsquo;s continue with our example from the previous post, and say we have a book store and we\u0026rsquo;re testing the edit book functionality.\nFor example, that\u0026rsquo;s a single fact about the behavior the code: test_user_can_edit_their_own_book And, this is not a single fact, it\u0026rsquo;s too general: test_edit_book How do they compare? Easy to understand? Single fact test: It\u0026rsquo;s clear what the test checks. It\u0026rsquo;s clear that it only checks that. General test: we\u0026rsquo;ll need to read and understand all the test code to know. Easy to debug? Single fact test: If it fails, it\u0026rsquo;s clear what functionality stopped working. And because it\u0026rsquo;s small, it\u0026rsquo;ll be easy to debug it. General test: if it fails, anything related to edit book might have failed. We\u0026rsquo;ll need to dig in. And it does a lot of things, so debugging might be a lot of work. Conclusion Try to have each test case will test a SINGLE FACT about the BEHAVIOR of the code.\nThis makes a huge difference and it\u0026rsquo;s worth it to invest a lot into this.\n\u0026lt;\u0026lt; previous post: Unclear Language | (coming soon) next post: Improper Test Scope \u0026gt;\u0026gt; ","permalink":"https://shaigeva.com/posts/10_footguns/06_testing_too_many_things/","summary":"\u003cstyle\u003e\n.code-example {\n  background-color: #2E2E33;\n  padding: 10px;\n  margin-bottom:10px;\n  border-radius: 5px;\n  font-family: monospace;\n  white-space: pre;\n  color: #d5d5d6;\n  font-size: .78em;\n  line-height: 1.5;\n}\n.highlight-red {\n  color: red;\n}\n.highlight-green {\n  color: green;\n}\n\u003c/style\u003e\n\n\u003cp\u003e(this mini-post is part of a \u003ca href=\"https://shaigeva.com/posts/10_footguns/ten_footguns/\"\u003eseries\u003c/a\u003e about good testing practices)\u003c/p\u003e\n\u003cp\u003eJust like with product code, if we put too many things in the same place we get a mess.\u003c/p\u003e\n\u003cp\u003eMy rule of thumb is to try hard to test a single fact about the behavior of the code.\nAnd it helps if I use these specific words mentally.\u003c/p\u003e","title":"Footgun #6 - Testing Too Many Things"},{"content":" (this mini-post is part of a series about good testing practices)\nAnother problem that makes it more difficult to understand tests is unclear language.\nTwo guidelines that help me deal with this:\nWe want to use decisive language We want the language to be specific and explicit Suppose we have a book store and we\u0026rsquo;re testing the functionality for editing a book.\nLet\u0026rsquo;s see some examples of test phrasing:\ndef test_edit_book(): ... This is simply too general.\nThere are so many things that might be tested, and this means almost nothing about what will get tested in practice.\ndef test_edit_book_works_correctly(): ... Adding things like \u0026ldquo;it works\u0026rdquo; or \u0026ldquo;it\u0026rsquo;s correct\u0026rdquo; - most of the time, this is just bloat.\nIt only makes the name bigger, but doesn\u0026rsquo;t give us any extra information.\ndef test_user_should_be_able_to_edit_their_own_book(): ... That\u0026rsquo;s much better - it\u0026rsquo;s a lot more specific.\nThe only problem here is the indecisive language.\nWhy \u0026ldquo;should\u0026rdquo;?\nWill this ever NOT be correct?\nIt\u0026rsquo;s both bloated and confusing.\nSo this as well - not optimal.\ndef test_user_can_edit_their_own_book(): ... That\u0026rsquo;s much better in my opinion.\nIt\u0026rsquo;s decisive, explicit and specific.\nI suggest to aim towards this whenever possible.\nConclusion When phrasing test names and descriptions, try to aim for decisive, specific and explicit language.\n\u0026lt;\u0026lt; previous post: No Locality of Behavior | next post: Testing Too Many Things \u0026gt;\u0026gt; ","permalink":"https://shaigeva.com/posts/10_footguns/05_unclear_language/","summary":"\u003cstyle\u003e\n.code-example {\n  background-color: #2E2E33;\n  padding: 10px;\n  margin-bottom:10px;\n  border-radius: 5px;\n  font-family: monospace;\n  white-space: pre;\n  color: #d5d5d6;\n  font-size: .78em;\n  line-height: 1.5;\n}\n.highlight-red {\n  color: red;\n}\n.highlight-green {\n  color: green;\n}\n\u003c/style\u003e\n\n\u003cp\u003e(this mini-post is part of a \u003ca href=\"https://shaigeva.com/posts/10_footguns/ten_footguns/\"\u003eseries\u003c/a\u003e about good testing practices)\u003c/p\u003e\n\u003cp\u003eAnother problem that makes it more difficult to understand tests is unclear language.\u003c/p\u003e\n\u003cp\u003eTwo guidelines that help me deal with this:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eWe want to use decisive language\u003c/li\u003e\n\u003cli\u003eWe want the language to be specific and explicit\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSuppose we have a book store and we\u0026rsquo;re testing the functionality for editing a book.\u003cbr\u003e\nLet\u0026rsquo;s see some examples of test phrasing:\u003c/p\u003e","title":"Footgun #5 - Unclear Language"},{"content":"(this mini-post is part of a series about good testing practices)\nOne testing problem that doesn\u0026rsquo;t get enough attention in my opinion is tests that don\u0026rsquo;t have locality of behavior.\nBy that I mean cases where a test is broken down into different parts in a way that makes understanding more difficult.\nThis is important in every type of code, and tests are no exception.\nExample: non-local data Consider this test:\ndef test_something(): data = Path(PATH_TO_DATA_FILE).read_text() assert calc_something(data) == 4.5 The data that the test uses is in a different file, so in order to understand the test we will need to locate that file and open it.\nEven if the data was in the same file, but a different place - it would still be an issue.\nNow, sometimes we don\u0026rsquo;t have a choice, and it\u0026rsquo;s the only way to do it.\nBut sometimes we do.\nFor example, if we can find a data example that\u0026rsquo;s small enough, we can do something like this:\ndef test_something(): data = “”” { \u0026lt;JSON data\u0026gt; } “”” assert calc_something(data) == 4.5 This is exactly the same test, but the data is local so it\u0026rsquo;s going to be much easier to understand at a glance, without \u0026ldquo;breaking the flow\u0026rdquo;.\nIt\u0026rsquo;s easier in tests than in production code One of the main problems with achieving locality of behavior is that it conflicts with DRY (\u0026ldquo;don\u0026rsquo;t repeat yourself\u0026rdquo;).\nWhat\u0026rsquo;s the problem with code duplication in production code?\nYou\u0026rsquo;ll often hear people talking about the \u0026ldquo;economics\u0026rdquo; - if you repeat a piece of code 3 times, then if you need to change that logic, you would need to do that work 3 times.\nHowever, this is actually a secondary consideration, especially if the number of repetitions is not high (let\u0026rsquo;s say 5 or less).\nThe real issue with repeating yourself is that duplication is an implicit dependency.\nIf you repeat the same logic in 3 different places, there\u0026rsquo;s a risk that if the logic needs to change, you would not notice one of these places, which would cause that \u0026ldquo;usage\u0026rdquo; to be deprecated and incosistent with the rest of the code - which will result in bugs and maintainability overhead, of course.\nThe nice thing about tests here is that this consideration is weaker, because of several factors.\nWhen we change code that has a test and make it behave differently, the relevant tests will usually break, so we will have something that points out to the duplicated \u0026ldquo;usages\u0026rdquo;. Where in production code - we only get that benefit if that piece of code has relevant tests - which might be very far from \u0026ldquo;always\u0026rdquo;. If the tests are focused and verify only a single fact, the number of times that we have duplication will be lower. And it\u0026rsquo;s far easier to write a test (at least a test that\u0026rsquo;s not end-to-end) that \u0026ldquo;checks one thing\u0026rdquo; than it is to write code that \u0026ldquo;does a single thing\u0026rdquo;, because if a piece of code does multiple things - you can just write multiple tests that run it separately, and each of them would test one thing. And, finally, if the mistake does happen in test-code and we forget to update a \u0026ldquo;usage\u0026rdquo; - it\u0026rsquo;ll render the test \u0026ldquo;wrong\u0026rdquo;, but it won\u0026rsquo;t actually cause a bug. Making a test wrong is bad, but it\u0026rsquo;s not as bad as a production bug, unless it affects a lot of tests. Of course, duplication is still something to consider - if there\u0026rsquo;s complex setup, or something that\u0026rsquo;s not complex but repeats many times - it\u0026rsquo;s probably worth it to extract functionality.\nThe point is that in production code, the right time to extract functionality is often after two or three usages - but in tests the balance allows for more.\nConclusion Be aware that tests which are \u0026ldquo;non-local\u0026rdquo; are far more difficult to maintain, and make a conscious effort to find ways to reduce the problem.\n\u0026lt;\u0026lt; previous post: The Tests Are Not Isolated | next post: Unclear Language \u0026gt;\u0026gt; ","permalink":"https://shaigeva.com/posts/10_footguns/04_no_locality_of_behavior/","summary":"\u003cp\u003e(this mini-post is part of a \u003ca href=\"https://shaigeva.com/posts/10_footguns/ten_footguns/\"\u003eseries\u003c/a\u003e about good testing practices)\u003c/p\u003e\n\u003cp\u003eOne testing problem that doesn\u0026rsquo;t get enough attention in my opinion is tests that don\u0026rsquo;t have locality of behavior.\u003c/p\u003e\n\u003cp\u003eBy that I mean cases where a test is broken down into different parts in a way that makes understanding more difficult.\u003c/p\u003e\n\u003cp\u003eThis is important in every type of code, and tests are no exception.\u003c/p\u003e\n\u003ch2 id=\"example-non-local-data\"\u003eExample: non-local data\u003c/h2\u003e\n\u003cp\u003eConsider this test:\u003c/p\u003e","title":"Footgun #4 - No Locality of Behavior"},{"content":"(this post is part of a series about good testing practices)\nWriting tests that are not isolated is a sure way to create unnecessary work for ourselves.\nBy \u0026ldquo;tests that are not isolated\u0026rdquo;, I mean tests that sometimes have a different outcome (failing / passing) if we run only a subset of them, if we run them in a different order or if we run them in parallel.\nWhy is this a problem? Let\u0026rsquo;s say we have 30 tests, and test 24 passes if we run it individually but fails if we run the entire test suite.\nIf the test was isolated, then there are only a limited number of things that can go wrong. The things that the test actually executes will almost certainly be the cause of the failure.\nBut now, of course, the reason for failure is not what test 24 checks, and not what any of the other tests checks either. The failure is caused by an implicit interaction between test 24 and, say, test 8.\nThis is difficult to debug, of course, because we would first need to play detective and find that it\u0026rsquo;s test 8 that\u0026rsquo;s causing the problem (which might take a LOT of effort, especially if the tests are e2e tests that run slowly or only in CI), and then track the combined flow of the tests to find the problematic interaction.\nBut it\u0026rsquo;s worse than this - what often happens is that we run the entire test suite, either locally or in CI, and test 24 fails - so we start analyzing it as if test 24 fails individually. We don\u0026rsquo;t even consider that it\u0026rsquo;s a combined failure, and sometimes we waste hours chasing irrelevant clues, just to get to the point that we notice the test passes if its executed separately.\nSo the fact that we have \u0026ldquo;individual tests\u0026rdquo; is actually a misleading illusion that only distracts us from the unfortunate truth - we have one gigantic test with inter-connected sub-sections.\nIf e2e tests run in parallel and sometimes run in different order, which makes this cross-test-failure flaky, we get the perfect storm and we might spend days of work on this.\nAnd, lastly, the situation could actually be worse - it might be that test 24 SHOULD fail, but it passes because of test 8, hiding a bug.\nWhat are the causes behind this? There are rare cases like technical limitations (e.g. external service rate limits), but in the vast majority of cases - it\u0026rsquo;s shared mutable state.\nA typical scenario for unit tests would be a global in-memory object, and for end-to-end tests maybe a row in a database.\nTest 8 would change that shared thing, and test 24 would therefore have a different state when it starts to execute, leading to the failure.\nSharing a resource that\u0026rsquo;s immutable (or never changes in practice) is not a problem - if it never changes, then it\u0026rsquo;s the same whether or not it\u0026rsquo;s accessed by multiple \u0026ldquo;consumers\u0026rdquo;.\nI\u0026rsquo;ve also seen more subtle cases of shared mutable state, for example tests that would rely on an email being sent through an actual email-sending service, and multiple tests checked for the same email.\nWhat can we do? First of all, because in my experience this is so often a very painful problem - I suggest to avoid this from the start, even if it means extra work or delaying writing some tests if can\u0026rsquo;t make them isolated at the moment.\nDO NOT create a suite of non-isolated e2e tests that use long-living mutating database entities. This is very very likely to cause a crisis down the road.\nBecause the problem is usually shared mutable state, we mostly just need to avoid that specific issue.\nUnit tests can use the same in-memory objects, but they have to be immutable, or at least never changed by convention.\nIf this is not an option - either create the object in every test or have some original which you clone at the beginning of the tests.\nThe trickier part are higher-level tests that use expensive resources like a database, where full initializations might cause the tests to be too slow.\nIf it\u0026rsquo;s not too expensive - initialize the entire thing, of course.\nOtherwise - make sure to clean up - delete created resources and revert the database / file system / etc. to its original state before continuing.\n\u0026lt;\u0026lt; previous post: Untested Tests | next post: No Locality of Behavior \u0026gt;\u0026gt; ","permalink":"https://shaigeva.com/posts/10_footguns/03_the_tests_are_not_isolated/","summary":"\u003cp\u003e(this post is part of a \u003ca href=\"https://shaigeva.com/posts/10_footguns/ten_footguns/\"\u003eseries\u003c/a\u003e about good testing practices)\u003c/p\u003e\n\u003cp\u003eWriting tests that are not isolated is a sure way to create unnecessary work for ourselves.\u003c/p\u003e\n\u003cp\u003eBy \u0026ldquo;tests that are not isolated\u0026rdquo;, I mean tests that sometimes have a different outcome (failing / passing) if we run\nonly a subset of them, if we run them in a different order or if we run them in parallel.\u003c/p\u003e\n\u003ch2 id=\"why-is-this-a-problem\"\u003eWhy is this a problem?\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s say we have 30 tests, and test 24 passes if we run it individually but fails if we run the entire test suite.\u003c/p\u003e","title":"Footgun #3 - The Tests Are Not Isolated"},{"content":"(this post is part of a series about good testing practices)\nSometimes our tests lie to us.\nWe have a test that was supposed to protect us from some bug, but that bug happened after all.\nOf course, what happened was that we made a mistake, and the test didn\u0026rsquo;t really verify what we thought it does.\nAs it turns out - when we write a test, it\u0026rsquo;s a good idea to spend a little effort to verify the test actually works.\nTo make sure that if the bug happens, the test does indeed fail.\nHow to avoid this My suggestion -\nWhen you write a test, for every assertion you write, make a small change:\nEither change the code a little and introduce the bug. Or change the test a little bit, so it verifies something a little different. This way you will be able to see if the test would have failed in the way you expect it to, and you\u0026rsquo;ll be able to count on it.\n\u0026lt;\u0026lt; previous post: There Are No Tests | next post: The Tests Are Not Isolated \u0026gt;\u0026gt; ","permalink":"https://shaigeva.com/posts/10_footguns/02_untested_tests/","summary":"\u003cp\u003e(this post is part of a \u003ca href=\"https://shaigeva.com/posts/10_footguns/ten_footguns/\"\u003eseries\u003c/a\u003e about good testing practices)\u003c/p\u003e\n\u003cp\u003eSometimes our tests lie to us.\u003c/p\u003e\n\u003cp\u003eWe have a test that was supposed to protect us from some bug, but that bug happened after all.\u003c/p\u003e\n\u003cp\u003eOf course, what happened was that we made a mistake, and the test didn\u0026rsquo;t really verify what we thought it does.\u003c/p\u003e\n\u003cp\u003eAs it turns out - when we write a test, it\u0026rsquo;s a good idea to spend a little effort to verify the test actually works.\u003cbr\u003e\nTo make sure that if the bug happens, the test does indeed fail.\u003c/p\u003e","title":"Footgun #2 - Untested Tests"},{"content":" My name is Shai Geva.\nI\u0026rsquo;ve been creating software for humans, with humans, for over 20 years.\nI\u0026rsquo;m mostly a builder, but have also played more \u0026ldquo;high level roles\u0026rdquo;, like product and management (my current position is tech-lead at Sayata).\nI write about various topics, focusing on AI, code quality and automated tests - all of which I\u0026rsquo;m very passionate about.\nI also speak at confrences, so far exclusively about tests.\nIf you\u0026rsquo;d like to get notified or talk to me, please follow / ping me on twitter / x or linkedin.\n","permalink":"https://shaigeva.com/about/","summary":"\u003cdiv style=\"position: relative; display: inline-block;\"\u003e\n  \u003cimg src=\"/shai_mic_cover.jpg\" alt=\"Profile pic\" title=\"Profile pic\" style=\"margin:0; display: block; width: 100%;\" /\u003e\n  \u003cdiv style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: linear-gradient(to bottom, rgba(0, 0, 0, 0.1) 70%, rgba(0, 0, 0, 0.7) 100%); pointer-events: none;\"\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eMy name is Shai Geva.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ve been creating software for humans, with humans, for over 20 years.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m mostly a builder, but have also played more \u0026ldquo;high level roles\u0026rdquo;, like product and management (my current position is\ntech-lead at \u003ca href=\"https://www.sayata.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eSayata\u003c/a\u003e).\u003c/p\u003e","title":"About"},{"content":"(this post is part of a series about good testing practices)\nThis is a \u0026ldquo;warm-up footgun\u0026rdquo; to the blog post series.\nThe easiest way to shoot yourself in the foot, testing-wise, is to have no tests at all.\nIn my experience, writing any tests often helps us - even if these tests are not well-written, and even if they\u0026rsquo;re just a drop in the sea.\nThere are a few reasons I noticed, why moving from no tests at all to even one test for some area of the code is useful.\nCode changes around hotspots Code changes are not uniformly distributed.\nIf we have a signifcantly-sized code base and we look 6 months to the past, we will see that changes tend to happen in the same places. We don\u0026rsquo;t change all types of features all the time and all types of infrastructure all the time.\nFeatures tend to evolve iteratively, and bugs that are introduced are statistically fixed in the following weeks or months.\nSo chances are - if you\u0026rsquo;ve changed an area of the code today, you will change it again in the next month.\nFor automated tests, what this means is that adding tests for the code we\u0026rsquo;re working on now tends to have a much larger impact than we might assume, because they are likely to protect us in the next few weeks.\nZero to one As with many, many considerations in any kind of project - making the first move is an uncomfortable \u0026ldquo;awkwardness\u0026rdquo; - we don\u0026rsquo;t exactly know how to do it.\nBut once we have a single test, we have an initial \u0026ldquo;paved road\u0026rdquo;, and we can keep improving in iterative steps, which is far easier.\nIf you never start, it\u0026rsquo;s 100% you\u0026rsquo;ll stay at zero Maybe the first test you\u0026rsquo;re writing will be the last.\nBut maybe it won\u0026rsquo;t, and it\u0026rsquo;ll lead to way to having a much better developer experience.\nIf you never write the first test, you will definitely not write tests number 2, 3 and 20.\nMy own experience I can\u0026rsquo;t back this up with anything besides \u0026ldquo;I\u0026rsquo;ve seen this enough, that\u0026rsquo;s the way it is\u0026rdquo; - but I can tell you that I almost never regretted writing the first few tests for a piece of code.\nIn almost all cases, it did help me improve the code design and prevent bugs.\nConclusion Start with something easy and simple, as long as you start :)\nnext post: Untested Tests \u0026gt;\u0026gt; ","permalink":"https://shaigeva.com/posts/10_footguns/01_there_are_no_tests/","summary":"\u003cp\u003e(this post is part of a \u003ca href=\"https://shaigeva.com/posts/10_footguns/ten_footguns/\"\u003eseries\u003c/a\u003e about good testing practices)\u003c/p\u003e\n\u003cp\u003eThis is a \u0026ldquo;warm-up footgun\u0026rdquo; to the blog post series.\u003c/p\u003e\n\u003cp\u003eThe easiest way to shoot yourself in the foot, testing-wise, is to have no tests at all.\u003c/p\u003e\n\u003cp\u003eIn my experience, writing any tests often helps us - even if these tests are not well-written, and even if they\u0026rsquo;re just a drop in the sea.\u003c/p\u003e\n\u003cp\u003eThere are a few reasons I noticed, why moving from no tests at all to even one test for some area of the code is useful.\u003c/p\u003e","title":"Footgun #1 - There Are No Tests"},{"content":"10 Ways To Shoot Yourself In The Foot With Tests - PyCon-IL 2024 (Hebrew) (English version below)\nThe talk shares hard-learned advice about how to avoid getting yourself in trouble with tests.\nSlides: Slideshare PyCon IL 2024\n10 Ways To Shoot Yourself In The Foot With Tests - PyCon-US 2023 (English) Given at Salt Lake City, Utah. The talk shares hard-learned advice about how to avoid getting yourself in trouble with tests.\nProperty-based testing - PyWeb-IL zoom meetup (Hebrew) General intro to property-based testing. Similar to the below talk but more python oriented, with more concrete examples. (and in zoom)\nProperty-based testing - Reversim2021 convention talk (Hebrew) General intro to property-based testing (not language specific)\n","permalink":"https://shaigeva.com/talks/","summary":"\u003ch1 id=\"10-ways-to-shoot-yourself-in-the-foot-with-tests---pycon-il-2024-hebrew\"\u003e10 Ways To Shoot Yourself In The Foot With Tests - PyCon-IL 2024 (Hebrew)\u003c/h1\u003e\n\u003cp\u003e(English version below)\u003c/p\u003e\n\u003cp\u003eThe talk shares hard-learned advice about how to avoid getting yourself in trouble with tests.\u003c/p\u003e\n\u003cp\u003eSlides: \u003ca href=\"https://bit.ly/testing_footguns_pycon_il_2024\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eSlideshare PyCon IL 2024\u003c/a\u003e\u003c/p\u003e\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/k-vDmoPT84g?autoplay=0\u0026amp;controls=1\u0026amp;end=0\u0026amp;loop=0\u0026amp;mute=0\u0026amp;start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\n\u003chr\u003e\n\u003ch1 id=\"10-ways-to-shoot-yourself-in-the-foot-with-tests---pycon-us-2023-english\"\u003e10 Ways To Shoot Yourself In The Foot With Tests - PyCon-US 2023 (English)\u003c/h1\u003e\n\u003cp\u003eGiven at Salt Lake City, Utah.\nThe talk shares hard-learned advice about how to avoid getting yourself in trouble with tests.\u003c/p\u003e","title":"Talks"}]