[{"content":"This is a series of posts, following a talk I gave (twice - at Pycon-US 2023 and Pycon-IL 2024), about testing best (and not-so-best) practices.\nThe talk shares 10 practices that I had bad experience with, along with ways of avoiding them.\nStarting with simple (but useful!), and moving on to more complex ideas:\nThere are no tests (warm up) Untested tests The tests are not isolated No locality of behavior Unclear language Testing too many things Improper test scope Test doubles everywhere Slow tests Wrong priorities Videos and slide decks from the talks\n10 Ways To Shoot Yourself In The Foot With Tests - PyCon-US 2023 (English) Given at Salt Lake City, Utah. Slides: Slideshare PyCon US 2023\n10 Ways To Shoot Yourself In The Foot With Tests - PyCon-IL 2024 (Hebrew) Slides: Slideshare PyCon IL 2024\n(video will be linked when uploaded to youtube)\n","permalink":"https://shaigeva.com/posts/10_footguns/ten_footguns/","summary":"\u003cp\u003eThis is a series of posts, following a talk I gave (twice - at Pycon-US 2023 and Pycon-IL 2024), about testing best (and not-so-best) practices.\u003c/p\u003e\n\u003cp\u003eThe talk shares 10 practices that I had bad experience with, along with ways of avoiding them.\u003c/p\u003e\n\u003cp\u003eStarting with simple (but useful!), and moving on to more complex ideas:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"/posts/10_footguns/01_there_are_no_tests/\"\u003eThere are no tests\u003c/a\u003e (warm up)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/posts/10_footguns/02_untested_tests/\"\u003eUntested tests\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/posts/10_footguns/03_the_tests_are_not_isolated/\"\u003eThe tests are not isolated\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/posts/10_footguns/04_no_locality_of_behavior/\"\u003eNo locality of behavior\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/posts/10_footguns/05_unclear_language/\"\u003eUnclear language\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTesting too many things\u003c/li\u003e\n\u003cli\u003eImproper test scope\u003c/li\u003e\n\u003cli\u003eTest doubles everywhere\u003c/li\u003e\n\u003cli\u003eSlow tests\u003c/li\u003e\n\u003cli\u003eWrong priorities\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eVideos and slide decks from the talks\u003c/p\u003e","title":"10 Ways To Shoot Yourself In The Foot With Tests"},{"content":" (this mini-post is part of a series about good testing practices)\nAnother problem that makes it more difficult to understand tests is unclear language.\nTwo guidelines that help me deal with this:\nWe want to use decisive language We want the language to be specific and explicit Suppose we have a book store and we\u0026rsquo;re testing the functionality for editing a book.\nLet\u0026rsquo;s see some examples of test phrasing:\ndef test_edit_book(): ... This is simply too general.\nThere are so many things that might be tested, and this means almost nothing about what will get tested in practice.\ndef test_edit_book_works_correctly(): ... Adding things like \u0026ldquo;it works\u0026rdquo; or \u0026ldquo;it\u0026rsquo;s correct\u0026rdquo; - most of the time, this is just bloat.\nIt only makes the name bigger, but doesn\u0026rsquo;t give us any extra information.\ndef test_user_should_be_able_to_edit_their_own_book(): ... That\u0026rsquo;s much better - it\u0026rsquo;s a lot more specific.\nThe only problem here is the indecisive language.\nWhy \u0026ldquo;should\u0026rdquo;?\nWill this ever NOT be correct?\nIt\u0026rsquo;s both bloated and confusing.\nSo this as well - not optimal.\ndef test_user_can_edit_their_own_book(): ... That\u0026rsquo;s much better in my opinion.\nIt\u0026rsquo;s decisive, explicit and specific.\nI suggest to aim towards this whenever possible.\nConclusion When phrasing test names and descriptions, try to aim for decisive, specific and explicit language.\n","permalink":"https://shaigeva.com/posts/10_footguns/05_unclear_language/","summary":"\u003cstyle\u003e\n.code-example {\n  background-color: #2E2E33;\n  padding: 10px;\n  margin-bottom:10px;\n  border-radius: 5px;\n  font-family: monospace;\n  white-space: pre;\n  color: #d5d5d6;\n  font-size: .78em;\n  line-height: 1.5;\n}\n.highlight-red {\n  color: red;\n}\n.highlight-green {\n  color: green;\n}\n\u003c/style\u003e\n\n\u003cp\u003e(this mini-post is part of a \u003ca href=\"https://shaigeva.com/posts/10_footguns/ten_footguns/\"\u003eseries\u003c/a\u003e about good testing practices)\u003c/p\u003e\n\u003cp\u003eAnother problem that makes it more difficult to understand tests is unclear language.\u003c/p\u003e\n\u003cp\u003eTwo guidelines that help me deal with this:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eWe want to use decisive language\u003c/li\u003e\n\u003cli\u003eWe want the language to be specific and explicit\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSuppose we have a book store and we\u0026rsquo;re testing the functionality for editing a book.\u003cbr\u003e\nLet\u0026rsquo;s see some examples of test phrasing:\u003c/p\u003e","title":"Footgun #5 - Unclear Language"},{"content":"(this mini-post is part of a series about good testing practices)\nOne testing problem that doesn\u0026rsquo;t get enough attention in my opinion is tests that don\u0026rsquo;t have locality of behavior.\nBy that I mean cases where a test is broken down into different parts in a way that makes understanding more difficult.\nThis is important in every type of code, and tests are no exception.\nExample: non-local data Consider this test:\ndef test_something(): data = Path(PATH_TO_DATA_FILE).read_text() assert calc_something(data) == 4.5 The data that the test uses is in a different file, so in order to understand the test we will need to locate that file and open it.\nEven if the data was in the same file, but a different place - it would still be an issue.\nNow, sometimes we don\u0026rsquo;t have a choice, and it\u0026rsquo;s the only way to do it.\nBut sometimes we do.\nFor example, if we can find a data example that\u0026rsquo;s small enough, we can do something like this:\ndef test_something(): data = “”” { \u0026lt;JSON data\u0026gt; } “”” assert calc_something(data) == 4.5 This is exactly the same test, but the data is local so it\u0026rsquo;s going to be much easier to understand at a glance, without \u0026ldquo;breaking the flow\u0026rdquo;.\nIt\u0026rsquo;s easier in tests than in production code One of the main problems with achieving locality of behavior is that it conflicts with DRY (\u0026ldquo;don\u0026rsquo;t repeat yourself\u0026rdquo;).\nWhat\u0026rsquo;s the problem with code duplication in production code?\nYou\u0026rsquo;ll often hear people talking about the \u0026ldquo;economics\u0026rdquo; - if you repeat a piece of code 3 times, then if you need to change that logic, you would need to do that work 3 times.\nHowever, this is actually a secondary consideration, especially if the number of repetitions is not high (let\u0026rsquo;s say 5 or less).\nThe real issue with repeating yourself is that duplication is an implicit dependency.\nIf you repeat the same logic in 3 different places, there\u0026rsquo;s a risk that if the logic needs to change, you would not notice one of these places, which would cause that \u0026ldquo;usage\u0026rdquo; to be deprecated and incosistent with the rest of the code - which will result in bugs and maintainability overhead, of course.\nThe nice thing about tests here is that this consideration is weaker, because of several factors.\nWhen we change code that has a test and make it behave differently, the relevant tests will usually break, so we will have something that points out to the duplicated \u0026ldquo;usages\u0026rdquo;. Where in production code - we only get that benefit if that piece of code has relevant tests - which might be very far from \u0026ldquo;always\u0026rdquo;. If the tests are focused and verify only a single fact, the number of times that we have duplication will be lower. And it\u0026rsquo;s far easier to write a test (at least a test that\u0026rsquo;s not end-to-end) that \u0026ldquo;checks one thing\u0026rdquo; than it is to write code that \u0026ldquo;does a single thing\u0026rdquo;, because if a piece of code does multiple things - you can just write multiple tests that run it separately, and each of them would test one thing. And, finally, if the mistake does happen in test-code and we forget to update a \u0026ldquo;usage\u0026rdquo; - it\u0026rsquo;ll render the test \u0026ldquo;wrong\u0026rdquo;, but it won\u0026rsquo;t actually cause a bug. Making a test wrong is bad, but it\u0026rsquo;s not as bad as a production bug, unless it affects a lot of tests. Of course, duplication is still something to consider - if there\u0026rsquo;s complex setup, or something that\u0026rsquo;s not complex but repeats many times - it\u0026rsquo;s probably worth it to extract functionality.\nThe point is that in production code, the right time to extract functionality is often after two or three usages - but in tests the balance allows for more.\nConclusion Be aware that tests which are \u0026ldquo;non-local\u0026rdquo; are far more difficult to maintain, and make a conscious effort to find ways to reduce the problem.\n","permalink":"https://shaigeva.com/posts/10_footguns/04_no_locality_of_behavior/","summary":"\u003cp\u003e(this mini-post is part of a \u003ca href=\"https://shaigeva.com/posts/10_footguns/ten_footguns/\"\u003eseries\u003c/a\u003e about good testing practices)\u003c/p\u003e\n\u003cp\u003eOne testing problem that doesn\u0026rsquo;t get enough attention in my opinion is tests that don\u0026rsquo;t have locality of behavior.\u003c/p\u003e\n\u003cp\u003eBy that I mean cases where a test is broken down into different parts in a way that makes understanding more difficult.\u003c/p\u003e\n\u003cp\u003eThis is important in every type of code, and tests are no exception.\u003c/p\u003e\n\u003ch2 id=\"example-non-local-data\"\u003eExample: non-local data\u003c/h2\u003e\n\u003cp\u003eConsider this test:\u003c/p\u003e","title":"Footgun #4 - No Locality of Behavior"},{"content":"(this post is part of a series about good testing practices)\nWriting tests that are not isolated is a sure way to create unnecessary work for ourselves.\nBy \u0026ldquo;tests that are not isolated\u0026rdquo;, I mean tests that sometimes have a different outcome (failing / passing) if we run only a subset of them, if we run them in a different order or if we run them in parallel.\nWhy is this a problem? Let\u0026rsquo;s say we have 30 tests, and test 24 passes if we run it individually but fails if we run the entire test suite.\nIf the test was isolated, then there are only a limited number of things that can go wrong. The things that the test actually executes will almost certainly be the cause of the failure.\nBut now, of course, the reason for failure is not what test 24 checks, and not what any of the other tests checks either. The failure is caused by an implicit interaction between test 24 and, say, test 8.\nThis is difficult to debug, of course, because we would first need to play detective and find that it\u0026rsquo;s test 8 that\u0026rsquo;s causing the problem (which might take a LOT of effort, especially if the tests are e2e tests that run slowly or only in CI), and then track the combined flow of the tests to find the problematic interaction.\nBut it\u0026rsquo;s worse than this - what often happens is that we run the entire test suite, either locally or in CI, and test 24 fails - so we start analyzing it as if test 24 fails individually. We don\u0026rsquo;t even consider that it\u0026rsquo;s a combined failure, and sometimes we waste hours chasing irrelevant clues, just to get to the point that we notice the test passes if its executed separately.\nSo the fact that we have \u0026ldquo;individual tests\u0026rdquo; is actually a misleading illusion that only distracts us from the unfortunate truth - we have one gigantic test with inter-connected sub-sections.\nIf e2e tests run in parallel and sometimes run in different order, which makes this cross-test-failure flaky, we get the perfect storm and we might spend days of work on this.\nAnd, lastly, the situation could actually be worse - it might be that test 24 SHOULD fail, but it passes because of test 8, hiding a bug.\nWhat are the causes behind this? There are rare cases like technical limitations (e.g. external service rate limits), but in the vast majority of cases - it\u0026rsquo;s shared mutable state.\nA typical scenario for unit tests would be a global in-memory object, and for end-to-end tests maybe a row in a database.\nTest 8 would change that shared thing, and test 24 would therefore have a different state when it starts to execute, leading to the failure.\nSharing a resource that\u0026rsquo;s immutable (or never changes in practice) is not a problem - if it never changes, then it\u0026rsquo;s the same whether or not it\u0026rsquo;s accessed by multiple \u0026ldquo;consumers\u0026rdquo;.\nI\u0026rsquo;ve also seen more subtle cases of shared mutable state, for example tests that would rely on an email being sent through an actual email-sending service, and multiple tests checked for the same email.\nWhat can we do? First of all, because in my experience this is so often a very painful problem - I suggest to avoid this from the start, even if it means extra work or delaying writing some tests if can\u0026rsquo;t make them isolated at the moment.\nDO NOT create a suite of non-isolated e2e tests that use long-living mutating database entities. This is very very likely to cause a crisis down the road.\nBecause the problem is usually shared mutable state, we mostly just need to avoid that specific issue.\nUnit tests can use the same in-memory objects, but they have to be immutable, or at least never changed by convention.\nIf this is not an option - either create the object in every test or have some original which you clone at the beginning of the tests.\nThe trickier part are higher-level tests that use expensive resources like a database, where full initializations might cause the tests to be too slow.\nIf it\u0026rsquo;s not too expensive - initialize the entire thing, of course.\nOtherwise - make sure to clean up - delete created resources and revert the database / file system / etc. to its original state before continuing.\n","permalink":"https://shaigeva.com/posts/10_footguns/03_the_tests_are_not_isolated/","summary":"\u003cp\u003e(this post is part of a \u003ca href=\"https://shaigeva.com/posts/10_footguns/ten_footguns/\"\u003eseries\u003c/a\u003e about good testing practices)\u003c/p\u003e\n\u003cp\u003eWriting tests that are not isolated is a sure way to create unnecessary work for ourselves.\u003c/p\u003e\n\u003cp\u003eBy \u0026ldquo;tests that are not isolated\u0026rdquo;, I mean tests that sometimes have a different outcome (failing / passing) if we run\nonly a subset of them, if we run them in a different order or if we run them in parallel.\u003c/p\u003e\n\u003ch2 id=\"why-is-this-a-problem\"\u003eWhy is this a problem?\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s say we have 30 tests, and test 24 passes if we run it individually but fails if we run the entire test suite.\u003c/p\u003e","title":"Footgun #3 - The Tests Are Not Isolated"},{"content":"(this post is part of a series about good testing practices)\nSometimes our tests lie to us.\nWe have a test that was supposed to protect us from some bug, but that bug happened after all.\nOf course, what happened was that we made a mistake, and the test didn\u0026rsquo;t really verify what we thought it does.\nAs it turns out - when we write a test, it\u0026rsquo;s a good idea to spend a little effort to verify the test actually works.\nTo make sure that if the bug happens, the test does indeed fail.\nHow to avoid this My suggestion -\nWhen you write a test, for every assertion you write, make a small change:\nEither change the code a little and introduce the bug. Or change the test a little bit, so it verifies something a little different. This way you will be able to see if the test would have failed in the way you expect it to, and you\u0026rsquo;ll be able to count on it.\n","permalink":"https://shaigeva.com/posts/10_footguns/02_untested_tests/","summary":"\u003cp\u003e(this post is part of a \u003ca href=\"https://shaigeva.com/posts/10_footguns/ten_footguns/\"\u003eseries\u003c/a\u003e about good testing practices)\u003c/p\u003e\n\u003cp\u003eSometimes our tests lie to us.\u003c/p\u003e\n\u003cp\u003eWe have a test that was supposed to protect us from some bug, but that bug happened after all.\u003c/p\u003e\n\u003cp\u003eOf course, what happened was that we made a mistake, and the test didn\u0026rsquo;t really verify what we thought it does.\u003c/p\u003e\n\u003cp\u003eAs it turns out - when we write a test, it\u0026rsquo;s a good idea to spend a little effort to verify the test actually works.\u003cbr\u003e\nTo make sure that if the bug happens, the test does indeed fail.\u003c/p\u003e","title":"Footgun #2 - Untested Tests"},{"content":" My name is Shai Geva.\nI\u0026rsquo;ve been creating software for humans, with humans, for over 20 years.\nI\u0026rsquo;m mostly a builder, but have also played more \u0026ldquo;high level roles\u0026rdquo;, like product and management (my current position is tech-lead at Sayata).\nI write about various topics, focusing on code quality and automated tests, which are a great passion for me.\nI also speak at confrences, so far exclusively about tests.\nIf you\u0026rsquo;d like to get notified or talk to me, please follow / ping me on twitter / x or linkedin.\n","permalink":"https://shaigeva.com/about/","summary":"\u003cdiv style=\"position: relative; display: inline-block;\"\u003e\n  \u003cimg src=\"/shai_mic_cover.jpg\" alt=\"Profile pic\" title=\"Profile pic\" style=\"margin:0; display: block; width: 100%;\" /\u003e\n  \u003cdiv style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: linear-gradient(to bottom, rgba(0, 0, 0, 0.1) 70%, rgba(0, 0, 0, 0.7) 100%); pointer-events: none;\"\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eMy name is Shai Geva.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ve been creating software for humans, with humans, for over 20 years.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m mostly a builder, but have also played more \u0026ldquo;high level roles\u0026rdquo;, like product and management (my current position is\ntech-lead at \u003ca href=\"https://www.sayata.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eSayata\u003c/a\u003e).\u003c/p\u003e","title":"About"},{"content":"(this post is part of a series about good testing practices)\nThis is a \u0026ldquo;warm-up footgun\u0026rdquo; to the blog post series.\nThe easiest way to shoot yourself in the foot, testing-wise, is to have no tests at all.\nIn my experience, writing any tests often helps us - even if these tests are not well-written, and even if they\u0026rsquo;re just a drop in the sea.\nThere are a few reasons I noticed, why moving from no tests at all to even one test for some area of the code is useful.\nCode changes around hotspots Code changes are not uniformly distributed.\nIf we have a signifcantly-sized code base and we look 6 months to the past, we will see that changes tend to happen in the same places. We don\u0026rsquo;t change all types of features all the time and all types of infrastructure all the time.\nFeatures tend to evolve iteratively, and bugs that are introduced are statistically fixed in the following weeks or months.\nSo chances are - if you\u0026rsquo;ve changed an area of the code today, you will change it again in the next month.\nFor automated tests, what this means is that adding tests for the code we\u0026rsquo;re working on now tends to have a much larger impact than we might assume, because they are likely to protect us in the next few weeks.\nZero to one As with many, many considerations in any kind of project - making the first move is an uncomfortable \u0026ldquo;awkwardness\u0026rdquo; - we don\u0026rsquo;t exactly know how to do it.\nBut once we have a single test, we have an initial \u0026ldquo;paved road\u0026rdquo;, and we can keep improving in iterative steps, which is far easier.\nIf you never start, it\u0026rsquo;s 100% you\u0026rsquo;ll stay at zero Maybe the first test you\u0026rsquo;re writing will be the last.\nBut maybe it won\u0026rsquo;t, and it\u0026rsquo;ll lead to way to having a much better developer experience.\nIf you never write the first test, you will definitely not write tests number 2, 3 and 20.\nMy own experience I can\u0026rsquo;t back this up with anything besides \u0026ldquo;I\u0026rsquo;ve seen this enough, that\u0026rsquo;s the way it is\u0026rdquo; - but I can tell you that I almost never regretted writing the first few tests for a piece of code.\nIn almost all cases, it did help me improve the code design and prevent bugs.\nConclusion Start with something easy and simple, as long as you start :)\n","permalink":"https://shaigeva.com/posts/10_footguns/01_there_are_no_tests/","summary":"\u003cp\u003e(this post is part of a \u003ca href=\"https://shaigeva.com/posts/10_footguns/ten_footguns/\"\u003eseries\u003c/a\u003e about good testing practices)\u003c/p\u003e\n\u003cp\u003eThis is a \u0026ldquo;warm-up footgun\u0026rdquo; to the blog post series.\u003c/p\u003e\n\u003cp\u003eThe easiest way to shoot yourself in the foot, testing-wise, is to have no tests at all.\u003c/p\u003e\n\u003cp\u003eIn my experience, writing any tests often helps us - even if these tests are not well-written, and even if they\u0026rsquo;re just a drop in the sea.\u003c/p\u003e\n\u003cp\u003eThere are a few reasons I noticed, why moving from no tests at all to even one test for some area of the code is useful.\u003c/p\u003e","title":"Footgun #1 - There Are No Tests"},{"content":"10 Ways To Shoot Yourself In The Foot With Tests - PyCon-US 2023 (English) Given at Salt Lake City, Utah. The talk shares hard-learned advice about how to avoid getting yourself in trouble with tests.\nProperty-based testing - PyWeb-IL zoom meetup (Hebrew) General intro to property-based testing. Similar to the below talk but more python oriented, with more concrete examples. (and in zoom)\nProperty-based testing - Reversim2021 convention talk (Hebrew) General intro to property-based testing (not language specific)\n","permalink":"https://shaigeva.com/talks/","summary":"\u003ch1 id=\"10-ways-to-shoot-yourself-in-the-foot-with-tests---pycon-us-2023-english\"\u003e10 Ways To Shoot Yourself In The Foot With Tests - PyCon-US 2023 (English)\u003c/h1\u003e\n\u003cp\u003eGiven at Salt Lake City, Utah.\nThe talk shares hard-learned advice about how to avoid getting yourself in trouble with tests.\u003c/p\u003e\n\n\n    \n    \u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/Ub31Ae6S1BY?autoplay=0\u0026controls=1\u0026end=0\u0026loop=0\u0026mute=0\u0026start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\n      \u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\n\u003chr\u003e\n\u003ch1 id=\"property-based-testing---pyweb-il-zoom-meetup-hebrew\"\u003eProperty-based testing - PyWeb-IL zoom meetup (Hebrew)\u003c/h1\u003e\n\u003cp\u003eGeneral intro to property-based testing.\nSimilar to the below talk but more python oriented, with more concrete examples.\n(and in zoom)\u003c/p\u003e","title":"Talks"}]