[{"content":"This is a series of posts, following two talk I gave (twice - at Pycon-US 2023 and Pycon-IL 2024), about testing best (and not-so-best) practices.\nThe talk shares 10 practices that I had bad experience with, along with ways of avoiding them.\nStarting with useful, but simple, and moving on to more complex ideas:\nThere are no tests (warm up) Untested tests The tests are not isolated No locality of behavior Unclear language Testing too many things Improper test scope Test doubles everywhere Slow tests Wrong priorities Videos and slide decks from the talks\n10 Ways To Shoot Yourself In The Foot With Tests - PyCon-US 2023 (English) Given at Salt Lake City, Utah. Slides: Slideshare PyCon US 2023\n10 Ways To Shoot Yourself In The Foot With Tests - PyCon-IL 2024 (Hebrew) Slides: Slideshare PyCon IL 2024\n(video will be linked when uploaded to youtube)\n","permalink":"https://shaigeva.com/posts/10_footguns/ten_footguns/","summary":"\u003cp\u003eThis is a series of posts, following two talk I gave (twice - at Pycon-US 2023 and Pycon-IL 2024), about testing best (and not-so-best) practices.\u003c/p\u003e\n\u003cp\u003eThe talk shares 10 practices that I had bad experience with, along with ways of avoiding them.\u003c/p\u003e\n\u003cp\u003eStarting with useful, but simple, and moving on to more complex ideas:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"/posts/10_footguns/01_there_are_no_tests/\"\u003eThere are no tests\u003c/a\u003e (warm up)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/posts/10_footguns/02_untested_tests/\"\u003eUntested tests\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe tests are not isolated\u003c/li\u003e\n\u003cli\u003eNo locality of behavior\u003c/li\u003e\n\u003cli\u003eUnclear language\u003c/li\u003e\n\u003cli\u003eTesting too many things\u003c/li\u003e\n\u003cli\u003eImproper test scope\u003c/li\u003e\n\u003cli\u003eTest doubles everywhere\u003c/li\u003e\n\u003cli\u003eSlow tests\u003c/li\u003e\n\u003cli\u003eWrong priorities\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eVideos and slide decks from the talks\u003c/p\u003e","title":"10 Ways To Shoot Yourself In The Foot With Tests"},{"content":"(this post is part of a series about good testing practices)\nSometimes our tests lie to us.\nWe have a test that was supposed to protect us from some bug, but that bug happened after all.\nOf course, what happened was that we made a mistake, and the test didn\u0026rsquo;t really verify what we thought it does.\nAs it turns out - when we write a test, it\u0026rsquo;s a good idea to spend a little effort to verify the test actually works.\nTo make sure that if the bug happens, the test does indeed fail.\nHow to avoid this My suggestion -\nWhen you write a test, for every assertion you write, make a small change:\nEither change the code a little and introduce the bug. Or change the test a little bit, so it verifies something a little different. This way you will be able to see if the test would have failed in the way you expect it to, and you\u0026rsquo;ll be able to count on it.\n","permalink":"https://shaigeva.com/posts/10_footguns/02_untested_tests/","summary":"\u003cp\u003e(this post is part of a \u003ca href=\"https://shaigeva.com/posts/10_footguns/ten_footguns/\"\u003eseries\u003c/a\u003e about good testing practices)\u003c/p\u003e\n\u003cp\u003eSometimes our tests lie to us.\u003c/p\u003e\n\u003cp\u003eWe have a test that was supposed to protect us from some bug, but that bug happened after all.\u003c/p\u003e\n\u003cp\u003eOf course, what happened was that we made a mistake, and the test didn\u0026rsquo;t really verify what we thought it does.\u003c/p\u003e\n\u003cp\u003eAs it turns out - when we write a test, it\u0026rsquo;s a good idea to spend a little effort to verify the test actually works.\u003cbr\u003e\nTo make sure that if the bug happens, the test does indeed fail.\u003c/p\u003e","title":"Footgun #2 - untested tests"},{"content":" My name is Shai Geva.\nI've been creating software for humans, with humans, for over 20 years.\nI\u0026rsquo;m mostly a builder, but have also played more \u0026ldquo;high level roles\u0026rdquo;, like product and management (my current position is tech-lead at Sayata).\nI write about various topics, focusing on code quality and automated tests, which are a great passion for me.\nI also speak at confrences, so far exclusively about tests.\nIf you\u0026rsquo;d like to get notified or talk to me, please follow / ping me on twitter / x or linkedin.\n","permalink":"https://shaigeva.com/about/","summary":"\u003cdiv style=\"display: flex; align-items: flex-start; margin-bottom: 20px; gap:10px;\"\u003e\n\u003cdiv\u003e\n  \u003cimg src=\"/shai_avatar.jpg\" alt=\"Profile pic\" title=\"Profile pic\" style=\"width: 200px; border-radius:100px;\" /\u003e\n\u003c/div\u003e\n\u003cdiv style=\"padding: 30px 0 0 30px;\"\u003e\n  \u003cp\u003eMy name is Shai Geva.\u003c/p\u003e\n\n  \u003cp\u003eI've been creating software for humans, with humans, for over 20 years.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eI\u0026rsquo;m mostly a builder, but have also played more \u0026ldquo;high level roles\u0026rdquo;, like product and management (my current position is\ntech-lead at \u003ca href=\"https://www.sayata.com/\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eSayata\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003eI \u003ca href=\"https://shaigeva.com/posts/\"\u003ewrite about\u003c/a\u003e various topics, focusing on code quality and automated tests, which are\na great passion for me.\u003c/p\u003e","title":"About"},{"content":"(this post is part of a series about good testing practices)\nThis is a \u0026ldquo;warm-up footgun\u0026rdquo; to the blog post series.\nThe easiest way to shoot yourself in the foot, testing-wise, is to have no tests at all.\nIn my experience, writing any tests often helps us - even if these tests are not well-written, and even if they\u0026rsquo;re just a drop in the sea.\nThere are a few reasons I noticed, why moving from no tests at all to even one test for some area of the code is useful.\nCode changes around hotspots Code changes are not uniformly distributed.\nIf we have a signifcantly-sized code base and we look 6 months to the past, we will see that changes tend to happen in the same places. We don\u0026rsquo;t change all types of features all the time and all types of infrastructure all the time.\nFeatures tend to evolve iteratively, and bugs that are introduced are statistically fixed in the following weeks or months.\nSo chances are - if you\u0026rsquo;ve changed an area of the code today, you will change it again in the next month.\nFor automated tests, what this means is that adding tests for the code we\u0026rsquo;re working on now tends to have a much larger impact than we might assume, because they are likely to protect us in the next few weeks.\nZero to one As with many, many considerations in any kind of project - making the first move is an uncomfortable \u0026ldquo;awkwardness\u0026rdquo; - we don\u0026rsquo;t exactly know how to do it.\nBut once we have a single test, we have an initial \u0026ldquo;paved road\u0026rdquo;, and we can keep improving in iterative steps, which is far easier.\nIf you never start, it\u0026rsquo;s 100% you\u0026rsquo;ll stay at zero Maybe the first test you\u0026rsquo;re writing will be the last.\nBut maybe it won\u0026rsquo;t, and it\u0026rsquo;ll lead to way to having a much better developer experience.\nIf you never write the first test, you will definitely not write tests number 2, 3 and 20.\nMy own experience I can\u0026rsquo;t back this up with anything besides \u0026ldquo;I\u0026rsquo;ve seen this enough, that\u0026rsquo;s the way it is\u0026rdquo; - but I can tell you that I almost never regretted writing the first few tests for a piece of code.\nIn almost all cases, it did help me improve the code design and prevent bugs.\nConclusion Start with something easy and simple, as long as you start :)\n","permalink":"https://shaigeva.com/posts/10_footguns/01_there_are_no_tests/","summary":"\u003cp\u003e(this post is part of a \u003ca href=\"https://shaigeva.com/posts/10_footguns/ten_footguns/\"\u003eseries\u003c/a\u003e about good testing practices)\u003c/p\u003e\n\u003cp\u003eThis is a \u0026ldquo;warm-up footgun\u0026rdquo; to the blog post series.\u003c/p\u003e\n\u003cp\u003eThe easiest way to shoot yourself in the foot, testing-wise, is to have no tests at all.\u003c/p\u003e\n\u003cp\u003eIn my experience, writing any tests often helps us - even if these tests are not well-written, and even if they\u0026rsquo;re just a drop in the sea.\u003c/p\u003e\n\u003cp\u003eThere are a few reasons I noticed, why moving from no tests at all to even one test for some area of the code is useful.\u003c/p\u003e","title":"Footgun #1 - there are no tests"},{"content":"10 Ways To Shoot Yourself In The Foot With Tests - PyCon-US 2023 (English) Given at Salt Lake City, Utah. The talk shares hard-learned advice about how to avoid getting yourself in trouble with tests.\nProperty-based testing - PyWeb-IL zoom meetup (Hebrew) General intro to property-based testing. Similar to the below talk but more python oriented, with more concrete examples. (and in zoom)\nProperty-based testing - Reversim2021 convention talk (Hebrew) General intro to property-based testing (not language specific)\n","permalink":"https://shaigeva.com/talks/","summary":"\u003ch1 id=\"10-ways-to-shoot-yourself-in-the-foot-with-tests---pycon-us-2023-english\"\u003e10 Ways To Shoot Yourself In The Foot With Tests - PyCon-US 2023 (English)\u003c/h1\u003e\n\u003cp\u003eGiven at Salt Lake City, Utah.\nThe talk shares hard-learned advice about how to avoid getting yourself in trouble with tests.\u003c/p\u003e\n\n\n    \n    \u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/Ub31Ae6S1BY?autoplay=0\u0026controls=1\u0026end=0\u0026loop=0\u0026mute=0\u0026start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\n      \u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\n\u003chr\u003e\n\u003ch1 id=\"property-based-testing---pyweb-il-zoom-meetup-hebrew\"\u003eProperty-based testing - PyWeb-IL zoom meetup (Hebrew)\u003c/h1\u003e\n\u003cp\u003eGeneral intro to property-based testing.\nSimilar to the below talk but more python oriented, with more concrete examples.\n(and in zoom)\u003c/p\u003e","title":"Talks"}]