<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Shai Geva</title>
    <link>https://shaigeva.com/posts/</link>
    <description>Recent content in Posts on Shai Geva</description>
    <generator>Hugo -- 0.151.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 Oct 2025 13:01:56 +0300</lastBuildDate>
    <atom:link href="https://shaigeva.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Moving past vibe-coding? AI-First Design Patterns and Frameworks (blog post series)</title>
      <link>https://shaigeva.com/posts/ai_frameworks/01_ai_frameworks_intro/</link>
      <pubDate>Fri, 20 Jun 2025 13:01:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/ai_frameworks/01_ai_frameworks_intro/</guid>
      <description>&lt;p&gt;(first post in a series)&lt;/p&gt;
&lt;p&gt;Like many others, I spent a lot of time thinking about AI and software development.&lt;/p&gt;
&lt;p&gt;I belong to the camp that believes that AI is a total paradigm shift - it&amp;rsquo;ll redefine the ecosystem and what it means to
create software, and it&amp;rsquo;ll be the deepest change we have seen to date.&lt;/p&gt;
&lt;p&gt;My own &amp;ldquo;flavor&amp;rdquo; of thinking about this is to try, from an &lt;strong&gt;engineering / implementation&lt;/strong&gt; perspective, to understand
what that change could look like.&lt;br&gt;
This blog series will dig into this and share my thoughts and conclusions from experimentation.&lt;br&gt;
I&amp;rsquo;ll talk about both:&lt;/p&gt;</description>
    </item>
    <item>
      <title>What an AI Feedback Loop Looks Like</title>
      <link>https://shaigeva.com/posts/ai_frameworks/02_ai_feedback_loop_example/</link>
      <pubDate>Sat, 04 Oct 2025 13:01:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/ai_frameworks/02_ai_feedback_loop_example/</guid>
      <description>&lt;p&gt;&lt;em&gt;(this post is part of a &lt;a href=&#34;https://shaigeva.com/posts/ai_frameworks/01_ai_frameworks_intro/&#34;&gt;series&lt;/a&gt; about creating
production-grade maintainable AI-first projects, using AI-first design patterns and frameworks)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the previous post I mentioned that an internal AI feedback loop will be central to all our AI-first design patterns.&lt;/p&gt;
&lt;p&gt;But &amp;ldquo;AI feedback loop&amp;rdquo; might mean different things to different people - so this lightweight post focuses on
giving an example to make it concrete.&lt;/p&gt;
&lt;p&gt;We will implement a small (but realistic) project.&lt;br&gt;
The project is set up so the agent has an internal feedback loop - it has instructions that tell
it to use a loop, and it has a clear way to create effective tests and run validations (the tests it creates,
type-checking, linter).&lt;br&gt;
We&amp;rsquo;ll see how it makes mistakes, finds them and self-heals.&lt;/p&gt;</description>
    </item>
    <item>
      <title>10 Ways To Shoot Yourself In The Foot With Tests</title>
      <link>https://shaigeva.com/posts/10_footguns/ten_footguns/</link>
      <pubDate>Fri, 16 May 2025 11:19:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/ten_footguns/</guid>
      <description>&lt;p&gt;This is a series of posts, following a talk I gave (twice - at Pycon-US 2023 and Pycon-IL 2024), about testing best (and not-so-best) practices.&lt;/p&gt;
&lt;p&gt;The talk shares 10 practices that I had bad experience with, along with ways of avoiding them.&lt;/p&gt;
&lt;p&gt;Starting with simple (but useful!), and moving on to more complex ideas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://shaigeva.com/posts/10_footguns/01_there_are_no_tests/&#34;&gt;There are no tests&lt;/a&gt; (warm up)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shaigeva.com/posts/10_footguns/02_untested_tests/&#34;&gt;Untested tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shaigeva.com/posts/10_footguns/03_the_tests_are_not_isolated/&#34;&gt;The tests are not isolated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shaigeva.com/posts/10_footguns/04_no_locality_of_behavior/&#34;&gt;No locality of behavior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shaigeva.com/posts/10_footguns/05_unclear_language/&#34;&gt;Unclear language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shaigeva.com/posts/10_footguns/06_testing_too_many_things/&#34;&gt;Testing too many things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shaigeva.com/posts/10_footguns/07_improper_test_scope/&#34;&gt;Improper test scope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shaigeva.com/posts/10_footguns/08_test_doubles_everywhere/&#34;&gt;Test doubles everywhere&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shaigeva.com/posts/10_footguns/09_slow_tests/&#34;&gt;Slow tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wrong priorities (coming soon)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Videos and slide decks from the talks&lt;/p&gt;</description>
    </item>
    <item>
      <title>Footgun #9 - Slow Tests</title>
      <link>https://shaigeva.com/posts/10_footguns/09_slow_tests/</link>
      <pubDate>Fri, 16 May 2025 10:18:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/09_slow_tests/</guid>
      <description>&lt;span class=&#34;aside&#34;&gt;
This mini-post is part of a &lt;a href=&#34;https://shaigeva.com/posts/10_footguns/ten_footguns&#34; target=&#34;_blank&#34;&gt;series&lt;/a&gt; about good testing practices, which I also presented at a couple of conferences.
&lt;br&gt;
Here it is in &lt;a href=&#34;https://youtu.be/Ub31Ae6S1BY?t=1099&#34; target=&#34;_blank&#34;&gt;PyCon US 2023&lt;/a&gt;
&lt;/span&gt;

&lt;p&gt;Slow tests are not fun.&lt;/p&gt;
&lt;p&gt;In this post, I&amp;rsquo;ll talk about two ways in which they are not fun&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The bottleneck and the time bomb&lt;/li&gt;
&lt;li&gt;The feedback loop and the bug funnel&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;the-bottleneck-and-the-time-bomb&#34;&gt;The bottleneck and the time bomb&lt;/h1&gt;
&lt;p&gt;&lt;img alt=&#34;Bottleneck diagram&#34; loading=&#34;lazy&#34; src=&#34;https://shaigeva.com/10_footguns/10_footguns_the_bottleneck_and_the_time_bomb.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;The bottleneck here is where the tests take so long to run, that we have a long queue of tasks waiting to be merged to the main branch.&lt;br&gt;
(this assumes we&amp;rsquo;re merging tasks to the main branch one-by-one, and only after the tests pass. Other branching models have similar issues, but this is the simplest to explain)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Footgun #8 - Test Doubles Everywhere</title>
      <link>https://shaigeva.com/posts/10_footguns/08_test_doubles_everywhere/</link>
      <pubDate>Fri, 16 May 2025 10:17:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/08_test_doubles_everywhere/</guid>
      <description>&lt;span class=&#34;aside&#34;&gt;
This mini-post is part of a &lt;a href=&#34;https://shaigeva.com/posts/10_footguns/ten_footguns&#34; target=&#34;_blank&#34;&gt;series&lt;/a&gt; about good testing practices, which I also presented at a couple of conferences.
&lt;br&gt;
Here it is in &lt;a href=&#34;https://youtu.be/Ub31Ae6S1BY?t=837&#34; target=&#34;_blank&#34;&gt;PyCon US 2023&lt;/a&gt;
&lt;/span&gt;

&lt;p&gt;Sometimes, in a test, we switch a part of the system, a dependency, with an alternative implementation.&lt;br&gt;
These are called test doubles. Things like stubs, mocks and fakes.&lt;/p&gt;
&lt;p&gt;A few of the central reasons for doing this are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Performance - if the real thing is too slow to run a lot of tests, we switch it with a
fast test double.&lt;/li&gt;
&lt;li&gt;Control - it might be difficult or impossible to set up the real thing in a certain state or make it behave in a
certain way.  Maybe it&amp;rsquo;s non-deterministic, maybe it has side effects that are not acceptable in tests. But tests
doubles are under our full control and won&amp;rsquo;t create side effects we don&amp;rsquo;t want.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;the-problem-with-test-doubles&#34;&gt;The problem with test doubles&lt;/h1&gt;
&lt;p&gt;Test doubles can be useful, but they are a re-implementation.&lt;br&gt;
They know the implementation details of the thing they&amp;rsquo;re replacing.&lt;br&gt;
Different types of test doubles do it differently, but this is what they do.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Footgun #7 - Improper Test Scope</title>
      <link>https://shaigeva.com/posts/10_footguns/07_improper_test_scope/</link>
      <pubDate>Fri, 16 May 2025 10:16:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/07_improper_test_scope/</guid>
      <description>&lt;span class=&#34;aside&#34;&gt;
This mini-post is part of a &lt;a href=&#34;https://shaigeva.com/posts/10_footguns/ten_footguns&#34; target=&#34;_blank&#34;&gt;series&lt;/a&gt; about good testing practices, which I also presented at a couple of conferences.
&lt;br&gt;
Here it is in &lt;a href=&#34;https://youtu.be/Ub31Ae6S1BY?t=447&#34; target=&#34;_blank&#34;&gt;PyCon US 2023&lt;/a&gt;
&lt;/span&gt;

&lt;p&gt;The root cause of many testing problems is improper test scope, i.e. that their boundaries aren&amp;rsquo;t appropriate.&lt;/p&gt;
&lt;h1 id=&#34;test-a-cohesive-whole---complete-story&#34;&gt;Test a cohesive whole - complete story&lt;/h1&gt;
&lt;p&gt;My approach here is that a test should verify a cohesive whole, a &amp;ldquo;complete story&amp;rdquo;.&lt;br&gt;
It can be a large story like an e2e test or a small story that&amp;rsquo;s part of a bigger story, like a custom sorting function
that something else uses.&lt;br&gt;
As long as it&amp;rsquo;s something self-contained - something whole, it might be worth testing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Footgun #6 - Testing Too Many Things</title>
      <link>https://shaigeva.com/posts/10_footguns/06_testing_too_many_things/</link>
      <pubDate>Fri, 16 May 2025 10:15:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/06_testing_too_many_things/</guid>
      <description>&lt;style&gt;
.code-example {
  background-color: #2E2E33;
  padding: 10px;
  margin-bottom:10px;
  border-radius: 5px;
  font-family: monospace;
  white-space: pre;
  color: #d5d5d6;
  font-size: .78em;
  line-height: 1.5;
}
.highlight-red {
  color: red;
}
.highlight-green {
  color: green;
}
&lt;/style&gt;

&lt;span class=&#34;aside&#34;&gt;
This mini-post is part of a &lt;a href=&#34;https://shaigeva.com/posts/10_footguns/ten_footguns&#34; target=&#34;_blank&#34;&gt;series&lt;/a&gt; about good testing practices, which I also presented at a couple of conferences.
&lt;br&gt;
Here it is in &lt;a href=&#34;https://youtu.be/Ub31Ae6S1BY?t=177&#34; target=&#34;_blank&#34;&gt;PyCon US 2023&lt;/a&gt;
&lt;/span&gt;

&lt;p&gt;Just like with product code, if we put too many things in the same place we get a mess.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Footgun #5 - Unclear Language</title>
      <link>https://shaigeva.com/posts/10_footguns/05_unclear_language/</link>
      <pubDate>Fri, 18 Oct 2024 20:15:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/05_unclear_language/</guid>
      <description>&lt;style&gt;
.code-example {
  background-color: #2E2E33;
  padding: 10px;
  margin-bottom:10px;
  border-radius: 5px;
  font-family: monospace;
  white-space: pre;
  color: #d5d5d6;
  font-size: .78em;
  line-height: 1.5;
}
.highlight-red {
  color: red;
}
.highlight-green {
  color: green;
}
&lt;/style&gt;

&lt;span class=&#34;aside&#34;&gt;
This mini-post is part of a &lt;a href=&#34;https://shaigeva.com/posts/10_footguns/ten_footguns&#34; target=&#34;_blank&#34;&gt;series&lt;/a&gt; about good testing practices, which I also presented at a couple of conferences.
&lt;br&gt;
Here it is in &lt;a href=&#34;https://youtu.be/Ub31Ae6S1BY?t=255&#34; target=&#34;_blank&#34;&gt;PyCon US 2023&lt;/a&gt;
&lt;/span&gt;

&lt;p&gt;Another problem that makes it more difficult to understand tests is unclear language.&lt;/p&gt;
&lt;p&gt;Two guidelines that help me deal with this:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Footgun #4 - No Locality of Behavior</title>
      <link>https://shaigeva.com/posts/10_footguns/04_no_locality_of_behavior/</link>
      <pubDate>Wed, 16 Oct 2024 20:15:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/04_no_locality_of_behavior/</guid>
      <description>&lt;span class=&#34;aside&#34;&gt;
This mini-post is part of a &lt;a href=&#34;https://shaigeva.com/posts/10_footguns/ten_footguns&#34; target=&#34;_blank&#34;&gt;series&lt;/a&gt; about good testing practices, which I also presented at a couple of conferences.
&lt;br&gt;
Here it is in &lt;a href=&#34;https://youtu.be/Ub31Ae6S1BY?t=0&#34; target=&#34;_blank&#34;&gt;PyCon US 2023&lt;/a&gt;
&lt;/span&gt;

&lt;p&gt;One testing problem that doesn&amp;rsquo;t get enough attention in my opinion is tests that don&amp;rsquo;t have locality of behavior.&lt;/p&gt;
&lt;p&gt;By that I mean cases where a test is broken down into different parts in a way that makes understanding more difficult.&lt;/p&gt;
&lt;p&gt;This is important in every type of code, and tests are no exception.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Footgun #3 - The Tests Are Not Isolated</title>
      <link>https://shaigeva.com/posts/10_footguns/03_the_tests_are_not_isolated/</link>
      <pubDate>Tue, 08 Oct 2024 20:15:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/03_the_tests_are_not_isolated/</guid>
      <description>&lt;span class=&#34;aside&#34;&gt;
This mini-post is part of a &lt;a href=&#34;https://shaigeva.com/posts/10_footguns/ten_footguns&#34; target=&#34;_blank&#34;&gt;series&lt;/a&gt; about good testing practices, which I also presented at a couple of conferences.
&lt;br&gt;
Here it is in &lt;a href=&#34;https://youtu.be/Ub31Ae6S1BY?t=412&#34; target=&#34;_blank&#34;&gt;PyCon US 2023&lt;/a&gt;
&lt;/span&gt;

&lt;p&gt;Writing tests that are not isolated is a sure way to create unnecessary work for ourselves.&lt;/p&gt;
&lt;p&gt;By &amp;ldquo;tests that are not isolated&amp;rdquo;, I mean tests that sometimes have a different outcome (failing / passing) if we run
only a subset of them, if we run them in a different order or if we run them in parallel.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Footgun #2 - Untested Tests</title>
      <link>https://shaigeva.com/posts/10_footguns/02_untested_tests/</link>
      <pubDate>Sat, 05 Oct 2024 17:15:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/02_untested_tests/</guid>
      <description>&lt;span class=&#34;aside&#34;&gt;
This mini-post is part of a &lt;a href=&#34;https://shaigeva.com/posts/10_footguns/ten_footguns&#34; target=&#34;_blank&#34;&gt;series&lt;/a&gt; about good testing practices, which I also presented at a couple of conferences.
&lt;br&gt;
Here it is in &lt;a href=&#34;https://youtu.be/Ub31Ae6S1BY?t=135&#34; target=&#34;_blank&#34;&gt;PyCon US 2023&lt;/a&gt;
&lt;/span&gt;

&lt;p&gt;Sometimes our tests lie to us.&lt;/p&gt;
&lt;p&gt;We have a test that was supposed to protect us from some bug, but that bug happened after all.&lt;/p&gt;
&lt;p&gt;Of course, what happened was that we made a mistake, and the test didn&amp;rsquo;t really verify what we thought it does.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Footgun #1 - There Are No Tests</title>
      <link>https://shaigeva.com/posts/10_footguns/01_there_are_no_tests/</link>
      <pubDate>Fri, 04 Oct 2024 13:01:56 +0300</pubDate>
      <guid>https://shaigeva.com/posts/10_footguns/01_there_are_no_tests/</guid>
      <description>&lt;span class=&#34;aside&#34;&gt;
This mini-post is part of a &lt;a href=&#34;https://shaigeva.com/posts/10_footguns/ten_footguns&#34; target=&#34;_blank&#34;&gt;series&lt;/a&gt; about good testing practices, which I also presented at a couple of conferences.
&lt;br&gt;
Here it is in &lt;a href=&#34;https://youtu.be/Ub31Ae6S1BY?t=111&#34; target=&#34;_blank&#34;&gt;PyCon US 2023&lt;/a&gt;
&lt;/span&gt;

&lt;p&gt;This is a &amp;ldquo;warm-up footgun&amp;rdquo; to the blog post series.&lt;/p&gt;
&lt;p&gt;The easiest way to shoot yourself in the foot, testing-wise, is to have no tests at all.&lt;/p&gt;
&lt;p&gt;In my experience, writing any tests often helps us - even if these tests are not well-written, and even if they&amp;rsquo;re just a drop in the sea.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
